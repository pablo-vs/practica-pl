
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Thu Jun 11 12:35:21 CEST 2020
//----------------------------------------------------

package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import errors.GestionErroresTiny;
import ast.*;
import ast.tipos.*;
import ast.exp.*;
import java.util.ArrayList;
import java.util.Arrays;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Thu Jun 11 12:35:21 CEST 2020
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\154\000\002\002\005\000\002\002\004\000\002\002" +
    "\002\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\004\005\000\002\005" +
    "\007\000\002\005\005\000\002\007\007\000\002\047\004" +
    "\000\002\047\003\000\002\006\005\000\002\010\005\000" +
    "\002\010\007\000\002\011\012\000\002\011\011\000\002" +
    "\046\007\000\002\046\005\000\002\012\004\000\002\023" +
    "\006\000\002\023\005\000\002\045\005\000\002\045\003" +
    "\000\002\024\004\000\002\024\004\000\002\013\006\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\015\005\000\002\016\005\000\002\043\005\000" +
    "\002\043\003\000\002\017\007\000\002\020\006\000\002" +
    "\044\005\000\002\044\003\000\002\021\005\000\002\022" +
    "\004\000\002\025\005\000\002\041\005\000\002\041\006" +
    "\000\002\041\004\000\002\041\003\000\002\042\003\000" +
    "\002\042\005\000\002\026\005\000\002\026\003\000\002" +
    "\027\005\000\002\027\003\000\002\030\004\000\002\030" +
    "\003\000\002\031\005\000\002\031\003\000\002\032\005" +
    "\000\002\032\003\000\002\033\005\000\002\033\003\000" +
    "\002\034\005\000\002\034\003\000\002\035\003\000\002" +
    "\035\003\000\002\036\003\000\002\036\003\000\002\036" +
    "\005\000\002\037\004\000\002\037\003\000\002\040\003" +
    "\000\002\040\003\000\002\040\003\000\002\040\003\000" +
    "\002\040\003\000\002\040\003\000\002\040\003\000\002" +
    "\040\005\000\002\040\005\000\002\040\005\000\002\054" +
    "\005\000\002\054\003\000\002\053\005\000\002\055\007" +
    "\000\002\055\005\000\002\050\003\000\002\050\003\000" +
    "\002\050\003\000\002\050\003\000\002\050\003\000\002" +
    "\051\003\000\002\051\003\000\002\051\003\000\002\052" +
    "\003\000\002\052\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\275\000\052\002\uffff\003\040\005\043\007\013\011" +
    "\024\016\035\020\010\023\014\025\026\026\036\027\046" +
    "\030\031\031\044\032\032\033\004\034\033\037\025\040" +
    "\016\053\020\060\050\001\002\000\020\004\uffd6\006\uffd6" +
    "\010\uffd6\013\uffd6\014\uffd6\037\uffd6\060\uffd6\001\002\000" +
    "\006\037\276\060\050\001\002\000\020\004\uffd9\006\uffd9" +
    "\010\uffd9\013\uffd9\014\uffd9\037\uffd9\060\uffd9\001\002\000" +
    "\010\007\061\051\274\052\060\001\002\000\034\005\101" +
    "\007\076\022\105\024\075\035\073\036\103\037\025\041" +
    "\106\042\100\043\077\053\074\057\072\060\050\001\002" +
    "\000\020\004\uffdc\006\uffdc\010\uffdc\013\uffdc\014\uffdc\037" +
    "\uffdc\060\uffdc\001\002\000\020\004\uffdb\006\uffdb\010\uffdb" +
    "\013\uffdb\014\uffdb\037\uffdb\060\uffdb\001\002\000\024\005" +
    "\043\007\013\027\046\031\044\032\032\033\004\034\033" +
    "\040\016\053\020\001\002\000\034\005\101\007\076\022" +
    "\105\024\075\035\073\036\103\037\025\041\106\042\100" +
    "\043\077\053\074\057\072\060\050\001\002\000\004\013" +
    "\ufffa\001\002\000\020\004\uffde\006\uffde\010\uffde\013\uffde" +
    "\014\uffde\037\uffde\060\uffde\001\002\000\004\013\ufff7\001" +
    "\002\000\024\005\043\007\013\027\046\031\044\032\032" +
    "\033\004\034\033\040\016\053\020\001\002\000\020\004" +
    "\uffdd\006\uffdd\010\uffdd\013\uffdd\014\uffdd\037\uffdd\060\uffdd" +
    "\001\002\000\020\004\uffda\006\uffda\010\uffda\013\uffda\014" +
    "\uffda\037\uffda\060\uffda\001\002\000\004\013\ufffc\001\002" +
    "\000\052\003\040\005\043\007\013\011\024\012\uffff\016" +
    "\035\020\010\023\014\025\026\026\036\027\046\030\031" +
    "\031\044\032\032\033\004\034\033\037\025\040\016\053" +
    "\020\060\050\001\002\000\064\004\uffc6\005\237\006\uffc6" +
    "\007\uffc6\010\uffc6\011\uffc6\013\uffc6\014\uffc6\015\uffc6\021" +
    "\uffc6\044\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6" +
    "\052\uffc6\054\uffc6\055\uffc6\056\uffc6\061\uffc6\062\uffc6\063" +
    "\uffc6\064\uffc6\065\uffc6\001\002\000\024\005\043\007\013" +
    "\027\046\031\044\032\032\033\004\034\033\040\016\053" +
    "\020\001\002\000\004\013\ufff9\001\002\000\004\013\ufffb" +
    "\001\002\000\004\040\215\001\002\000\020\004\uffd7\006" +
    "\uffd7\010\uffd7\013\uffd7\014\uffd7\037\uffd7\060\uffd7\001\002" +
    "\000\020\004\uffd5\006\uffd5\010\uffd5\013\uffd5\014\uffd5\037" +
    "\uffd5\060\uffd5\001\002\000\004\013\ufffd\001\002\000\034" +
    "\005\101\007\076\022\105\024\075\035\073\036\103\037" +
    "\025\041\106\042\100\043\077\053\074\057\072\060\050" +
    "\001\002\000\034\005\101\007\076\022\105\024\075\035" +
    "\073\036\103\037\025\041\106\042\100\043\077\053\074" +
    "\057\072\060\050\001\002\000\004\013\ufffe\001\002\000" +
    "\004\013\ufff4\001\002\000\004\013\ufff8\001\002\000\004" +
    "\013\ufff6\001\002\000\024\005\043\007\013\027\046\031" +
    "\044\032\032\033\004\034\033\040\016\053\020\001\002" +
    "\000\020\004\uffd8\006\uffd8\010\uffd8\013\uffd8\014\uffd8\037" +
    "\uffd8\060\uffd8\001\002\000\004\002\202\001\002\000\004" +
    "\007\171\001\002\000\004\013\167\001\002\000\006\005" +
    "\053\037\052\001\002\000\004\013\ufff5\001\002\000\062" +
    "\004\uffc5\006\uffc5\007\uffc5\010\uffc5\011\uffc5\013\uffc5\014" +
    "\uffc5\015\uffc5\021\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5" +
    "\050\uffc5\051\uffc5\052\uffc5\054\uffc5\055\uffc5\056\uffc5\061" +
    "\uffc5\062\uffc5\063\uffc5\064\uffc5\065\uffc5\001\002\000\006" +
    "\037\055\060\050\001\002\000\062\004\uffc7\006\uffc7\007" +
    "\uffc7\010\uffc7\011\uffc7\013\uffc7\014\uffc7\015\uffc7\021\uffc7" +
    "\044\uffc7\045\uffc7\046\uffc7\047\uffc7\050\uffc7\051\uffc7\052" +
    "\uffc7\054\uffc7\055\uffc7\056\uffc7\061\uffc7\062\uffc7\063\uffc7" +
    "\064\uffc7\065\uffc7\001\002\000\060\004\uffc6\006\uffc6\007" +
    "\uffc6\010\uffc6\011\uffc6\013\uffc6\014\uffc6\015\uffc6\021\uffc6" +
    "\044\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6\052\uffc6\054" +
    "\uffc6\055\uffc6\056\uffc6\061\uffc6\062\uffc6\063\uffc6\064\uffc6" +
    "\065\uffc6\001\002\000\010\006\057\007\061\052\060\001" +
    "\002\000\062\004\uffc4\006\uffc4\007\uffc4\010\uffc4\011\uffc4" +
    "\013\uffc4\014\uffc4\015\uffc4\021\uffc4\044\uffc4\045\uffc4\046" +
    "\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4\054\uffc4\055\uffc4" +
    "\056\uffc4\061\uffc4\062\uffc4\063\uffc4\064\uffc4\065\uffc4\001" +
    "\002\000\004\037\166\001\002\000\034\005\101\007\076" +
    "\022\105\024\075\035\073\036\103\037\025\041\106\042" +
    "\100\043\077\053\074\057\072\060\050\001\002\000\054" +
    "\004\uffb6\006\uffb6\010\uffb6\011\uffb6\013\uffb6\014\uffb6\015" +
    "\uffb6\021\uffb6\044\uffb6\045\uffb6\046\uffb6\047\uffb6\050\164" +
    "\054\uffb6\055\uffb6\056\uffb6\061\uffb6\062\uffb6\063\uffb6\064" +
    "\uffb6\065\uffb6\001\002\000\052\004\uffb8\006\uffb8\010\uffb8" +
    "\011\uffb8\013\uffb8\014\uffb8\015\uffb8\021\uffb8\044\uffb8\045" +
    "\uffb8\046\162\047\161\054\uffb8\055\uffb8\056\uffb8\061\uffb8" +
    "\062\uffb8\063\uffb8\064\uffb8\065\uffb8\001\002\000\046\004" +
    "\uffba\006\uffba\010\uffba\011\uffba\013\uffba\014\uffba\015\uffba" +
    "\021\uffba\044\153\045\156\054\155\055\uffba\056\uffba\061" +
    "\uffba\062\uffba\063\uffba\064\uffba\065\uffba\001\002\000\040" +
    "\004\uffbc\006\uffbc\010\uffbc\011\uffbc\013\uffbc\014\uffbc\015" +
    "\uffbc\021\uffbc\055\uffbc\056\uffbc\061\150\062\146\063\151" +
    "\064\147\065\145\001\002\000\026\004\uffbe\006\uffbe\010" +
    "\uffbe\011\uffbe\013\uffbe\014\uffbe\015\uffbe\021\uffbe\055\uffbe" +
    "\056\uffbe\001\002\000\026\004\uffc0\006\uffc0\010\uffc0\011" +
    "\uffc0\013\uffc0\014\uffc0\015\uffc0\021\uffc0\055\uffc0\056\uffc0" +
    "\001\002\000\026\004\uffc2\006\uffc2\010\uffc2\011\uffc2\013" +
    "\uffc2\014\uffc2\015\uffc2\021\uffc2\055\140\056\141\001\002" +
    "\000\004\010\137\001\002\000\032\005\101\007\076\022" +
    "\105\024\075\035\073\036\103\037\025\041\106\042\100" +
    "\043\077\053\074\060\050\001\002\000\054\004\uffae\006" +
    "\uffae\010\uffae\011\uffae\013\uffae\014\uffae\015\uffae\021\uffae" +
    "\044\uffae\045\uffae\046\uffae\047\uffae\050\uffae\054\uffae\055" +
    "\uffae\056\uffae\061\uffae\062\uffae\063\uffae\064\uffae\065\uffae" +
    "\001\002\000\010\037\055\053\074\060\050\001\002\000" +
    "\054\004\uffaa\006\uffaa\010\uffaa\011\uffaa\013\uffaa\014\uffaa" +
    "\015\uffaa\021\uffaa\044\uffaa\045\uffaa\046\uffaa\047\uffaa\050" +
    "\uffaa\054\uffaa\055\uffaa\056\uffaa\061\uffaa\062\uffaa\063\uffaa" +
    "\064\uffaa\065\uffaa\001\002\000\034\005\101\007\076\022" +
    "\105\024\075\035\073\036\103\037\025\041\106\042\100" +
    "\043\077\053\074\057\072\060\050\001\002\000\054\004" +
    "\uffa8\006\uffa8\010\uffa8\011\uffa8\013\uffa8\014\uffa8\015\uffa8" +
    "\021\uffa8\044\uffa8\045\uffa8\046\uffa8\047\uffa8\050\uffa8\054" +
    "\uffa8\055\uffa8\056\uffa8\061\uffa8\062\uffa8\063\uffa8\064\uffa8" +
    "\065\uffa8\001\002\000\054\004\uffab\006\uffab\010\uffab\011" +
    "\uffab\013\uffab\014\uffab\015\uffab\021\uffab\044\uffab\045\uffab" +
    "\046\uffab\047\uffab\050\uffab\054\uffab\055\uffab\056\uffab\061" +
    "\uffab\062\uffab\063\uffab\064\uffab\065\uffab\001\002\000\034" +
    "\005\101\007\076\022\105\024\075\035\073\036\103\037" +
    "\025\041\106\042\100\043\077\053\074\057\072\060\050" +
    "\001\002\000\054\004\uffb2\006\uffb2\010\uffb2\011\uffb2\013" +
    "\uffb2\014\uffb2\015\uffb2\021\uffb2\044\uffb2\045\uffb2\046\uffb2" +
    "\047\uffb2\050\uffb2\054\uffb2\055\uffb2\056\uffb2\061\uffb2\062" +
    "\uffb2\063\uffb2\064\uffb2\065\uffb2\001\002\000\054\004\uffad" +
    "\006\uffad\010\uffad\011\uffad\013\uffad\014\uffad\015\uffad\021" +
    "\uffad\044\uffad\045\uffad\046\uffad\047\uffad\050\uffad\054\uffad" +
    "\055\uffad\056\uffad\061\uffad\062\uffad\063\uffad\064\uffad\065" +
    "\uffad\001\002\000\054\004\uffb3\006\uffb3\010\uffb3\011\uffb3" +
    "\013\uffb3\014\uffb3\015\uffb3\021\uffb3\044\uffb3\045\uffb3\046" +
    "\uffb3\047\uffb3\050\uffb3\054\uffb3\055\uffb3\056\uffb3\061\uffb3" +
    "\062\uffb3\063\uffb3\064\uffb3\065\uffb3\001\002\000\054\004" +
    "\uffa9\006\uffa9\010\uffa9\011\uffa9\013\uffa9\014\uffa9\015\uffa9" +
    "\021\uffa9\044\uffa9\045\uffa9\046\uffa9\047\uffa9\050\uffa9\054" +
    "\uffa9\055\uffa9\056\uffa9\061\uffa9\062\uffa9\063\uffa9\064\uffa9" +
    "\065\uffa9\001\002\000\054\004\uffac\006\uffac\010\uffac\011" +
    "\uffac\013\uffac\014\uffac\015\uffac\021\uffac\044\uffac\045\uffac" +
    "\046\uffac\047\uffac\050\uffac\054\uffac\055\uffac\056\uffac\061" +
    "\uffac\062\uffac\063\uffac\064\uffac\065\uffac\001\002\000\054" +
    "\004\uffb4\006\uffb4\010\uffb4\011\uffb4\013\uffb4\014\uffb4\015" +
    "\uffb4\021\uffb4\044\uffb4\045\uffb4\046\uffb4\047\uffb4\050\uffb4" +
    "\054\uffb4\055\uffb4\056\uffb4\061\uffb4\062\uffb4\063\uffb4\064" +
    "\uffb4\065\uffb4\001\002\000\054\004\uffb5\006\uffb5\010\uffb5" +
    "\011\uffb5\013\uffb5\014\uffb5\015\uffb5\021\uffb5\044\uffb5\045" +
    "\uffb5\046\uffb5\047\uffb5\050\uffb5\054\uffb5\055\uffb5\056\uffb5" +
    "\061\uffb5\062\uffb5\063\uffb5\064\uffb5\065\uffb5\001\002\000" +
    "\060\004\uffaf\006\uffaf\007\061\010\uffaf\011\uffaf\013\uffaf" +
    "\014\uffaf\015\uffaf\021\uffaf\044\uffaf\045\uffaf\046\uffaf\047" +
    "\uffaf\050\uffaf\052\060\054\uffaf\055\uffaf\056\uffaf\061\uffaf" +
    "\062\uffaf\063\uffaf\064\uffaf\065\uffaf\001\002\000\006\004" +
    "\115\006\116\001\002\000\004\006\114\001\002\000\054" +
    "\004\uffa6\006\uffa6\010\uffa6\011\uffa6\013\uffa6\014\uffa6\015" +
    "\uffa6\021\uffa6\044\uffa6\045\uffa6\046\uffa6\047\uffa6\050\uffa6" +
    "\054\uffa6\055\uffa6\056\uffa6\061\uffa6\062\uffa6\063\uffa6\064" +
    "\uffa6\065\uffa6\001\002\000\034\005\101\007\076\022\105" +
    "\024\075\035\073\036\103\037\025\041\106\042\100\043" +
    "\077\053\074\057\072\060\050\001\002\000\054\004\uffb1" +
    "\006\uffb1\010\uffb1\011\uffb1\013\uffb1\014\uffb1\015\uffb1\021" +
    "\uffb1\044\uffb1\045\uffb1\046\uffb1\047\uffb1\050\uffb1\054\uffb1" +
    "\055\uffb1\056\uffb1\061\uffb1\062\uffb1\063\uffb1\064\uffb1\065" +
    "\uffb1\001\002\000\010\004\121\006\uffa3\010\uffa3\001\002" +
    "\000\004\006\uffa2\001\002\000\034\005\101\007\076\022" +
    "\105\024\075\035\073\036\103\037\025\041\106\042\100" +
    "\043\077\053\074\057\072\060\050\001\002\000\006\006" +
    "\uffa4\010\uffa4\001\002\000\010\004\121\010\uffa3\014\130" +
    "\001\002\000\004\010\127\001\002\000\004\010\126\001" +
    "\002\000\054\004\uffa7\006\uffa7\010\uffa7\011\uffa7\013\uffa7" +
    "\014\uffa7\015\uffa7\021\uffa7\044\uffa7\045\uffa7\046\uffa7\047" +
    "\uffa7\050\uffa7\054\uffa7\055\uffa7\056\uffa7\061\uffa7\062\uffa7" +
    "\063\uffa7\064\uffa7\065\uffa7\001\002\000\054\004\uffa5\006" +
    "\uffa5\010\uffa5\011\uffa5\013\uffa5\014\uffa5\015\uffa5\021\uffa5" +
    "\044\uffa5\045\uffa5\046\uffa5\047\uffa5\050\uffa5\054\uffa5\055" +
    "\uffa5\056\uffa5\061\uffa5\062\uffa5\063\uffa5\064\uffa5\065\uffa5" +
    "\001\002\000\034\005\101\007\076\022\105\024\075\035" +
    "\073\036\103\037\025\041\106\042\100\043\077\053\074" +
    "\057\072\060\050\001\002\000\006\004\132\010\uffa0\001" +
    "\002\000\034\005\101\007\076\022\105\024\075\035\073" +
    "\036\103\037\025\041\106\042\100\043\077\053\074\057" +
    "\072\060\050\001\002\000\004\014\130\001\002\000\004" +
    "\010\uffa1\001\002\000\054\004\uffb0\006\uffb0\010\uffb0\011" +
    "\uffb0\013\uffb0\014\uffb0\015\uffb0\021\uffb0\044\uffb0\045\uffb0" +
    "\046\uffb0\047\uffb0\050\uffb0\054\uffb0\055\uffb0\056\uffb0\061" +
    "\uffb0\062\uffb0\063\uffb0\064\uffb0\065\uffb0\001\002\000\026" +
    "\004\uffbf\006\uffbf\010\uffbf\011\uffbf\013\uffbf\014\uffbf\015" +
    "\uffbf\021\uffbf\055\uffbf\056\uffbf\001\002\000\062\004\uffc8" +
    "\006\uffc8\007\uffc8\010\uffc8\011\uffc8\013\uffc8\014\uffc8\015" +
    "\uffc8\021\uffc8\044\uffc8\045\uffc8\046\uffc8\047\uffc8\050\uffc8" +
    "\051\uffc8\052\uffc8\054\uffc8\055\uffc8\056\uffc8\061\uffc8\062" +
    "\uffc8\063\uffc8\064\uffc8\065\uffc8\001\002\000\034\005\101" +
    "\007\076\022\105\024\075\035\073\036\103\037\025\041" +
    "\106\042\100\043\077\053\074\057\072\060\050\001\002" +
    "\000\034\005\101\007\076\022\105\024\075\035\073\036" +
    "\103\037\025\041\106\042\100\043\077\053\074\057\072" +
    "\060\050\001\002\000\022\004\uffc3\006\uffc3\010\uffc3\011" +
    "\uffc3\013\uffc3\014\uffc3\015\uffc3\021\uffc3\001\002\000\026" +
    "\004\uffc1\006\uffc1\010\uffc1\011\uffc1\013\uffc1\014\uffc1\015" +
    "\uffc1\021\uffc1\055\uffc1\056\uffc1\001\002\000\032\005\101" +
    "\007\076\022\105\024\075\035\073\036\103\037\025\041" +
    "\106\042\100\043\077\053\074\060\050\001\002\000\032" +
    "\005\uff9b\007\uff9b\022\uff9b\024\uff9b\035\uff9b\036\uff9b\037" +
    "\uff9b\041\uff9b\042\uff9b\043\uff9b\053\uff9b\060\uff9b\001\002" +
    "\000\032\005\uff9e\007\uff9e\022\uff9e\024\uff9e\035\uff9e\036" +
    "\uff9e\037\uff9e\041\uff9e\042\uff9e\043\uff9e\053\uff9e\060\uff9e" +
    "\001\002\000\032\005\uff9c\007\uff9c\022\uff9c\024\uff9c\035" +
    "\uff9c\036\uff9c\037\uff9c\041\uff9c\042\uff9c\043\uff9c\053\uff9c" +
    "\060\uff9c\001\002\000\032\005\uff9d\007\uff9d\022\uff9d\024" +
    "\uff9d\035\uff9d\036\uff9d\037\uff9d\041\uff9d\042\uff9d\043\uff9d" +
    "\053\uff9d\060\uff9d\001\002\000\032\005\uff9f\007\uff9f\022" +
    "\uff9f\024\uff9f\035\uff9f\036\uff9f\037\uff9f\041\uff9f\042\uff9f" +
    "\043\uff9f\053\uff9f\060\uff9f\001\002\000\026\004\uffbd\006" +
    "\uffbd\010\uffbd\011\uffbd\013\uffbd\014\uffbd\015\uffbd\021\uffbd" +
    "\055\uffbd\056\uffbd\001\002\000\032\005\uff9a\007\uff9a\022" +
    "\uff9a\024\uff9a\035\uff9a\036\uff9a\037\uff9a\041\uff9a\042\uff9a" +
    "\043\uff9a\053\uff9a\060\uff9a\001\002\000\032\005\101\007" +
    "\076\022\105\024\075\035\073\036\103\037\025\041\106" +
    "\042\100\043\077\053\074\060\050\001\002\000\032\005" +
    "\uff98\007\uff98\022\uff98\024\uff98\035\uff98\036\uff98\037\uff98" +
    "\041\uff98\042\uff98\043\uff98\053\uff98\060\uff98\001\002\000" +
    "\032\005\uff99\007\uff99\022\uff99\024\uff99\035\uff99\036\uff99" +
    "\037\uff99\041\uff99\042\uff99\043\uff99\053\uff99\060\uff99\001" +
    "\002\000\040\004\uffbb\006\uffbb\010\uffbb\011\uffbb\013\uffbb" +
    "\014\uffbb\015\uffbb\021\uffbb\055\uffbb\056\uffbb\061\uffbb\062" +
    "\uffbb\063\uffbb\064\uffbb\065\uffbb\001\002\000\032\005\101" +
    "\007\076\022\105\024\075\035\073\036\103\037\025\041" +
    "\106\042\100\043\077\053\074\060\050\001\002\000\032" +
    "\005\uff96\007\uff96\022\uff96\024\uff96\035\uff96\036\uff96\037" +
    "\uff96\041\uff96\042\uff96\043\uff96\053\uff96\060\uff96\001\002" +
    "\000\032\005\uff97\007\uff97\022\uff97\024\uff97\035\uff97\036" +
    "\uff97\037\uff97\041\uff97\042\uff97\043\uff97\053\uff97\060\uff97" +
    "\001\002\000\046\004\uffb9\006\uffb9\010\uffb9\011\uffb9\013" +
    "\uffb9\014\uffb9\015\uffb9\021\uffb9\044\uffb9\045\uffb9\054\uffb9" +
    "\055\uffb9\056\uffb9\061\uffb9\062\uffb9\063\uffb9\064\uffb9\065" +
    "\uffb9\001\002\000\032\005\101\007\076\022\105\024\075" +
    "\035\073\036\103\037\025\041\106\042\100\043\077\053" +
    "\074\060\050\001\002\000\052\004\uffb7\006\uffb7\010\uffb7" +
    "\011\uffb7\013\uffb7\014\uffb7\015\uffb7\021\uffb7\044\uffb7\045" +
    "\uffb7\046\uffb7\047\uffb7\054\uffb7\055\uffb7\056\uffb7\061\uffb7" +
    "\062\uffb7\063\uffb7\064\uffb7\065\uffb7\001\002\000\062\004" +
    "\uffc9\006\uffc9\007\uffc9\010\uffc9\011\uffc9\013\uffc9\014\uffc9" +
    "\015\uffc9\021\uffc9\044\uffc9\045\uffc9\046\uffc9\047\uffc9\050" +
    "\uffc9\051\uffc9\052\uffc9\054\uffc9\055\uffc9\056\uffc9\061\uffc9" +
    "\062\uffc9\063\uffc9\064\uffc9\065\uffc9\001\002\000\054\002" +
    "\uffff\003\040\005\043\007\013\011\024\012\uffff\016\035" +
    "\020\010\023\014\025\026\026\036\027\046\030\031\031" +
    "\044\032\032\033\004\034\033\037\025\040\016\053\020" +
    "\060\050\001\002\000\006\002\001\012\001\001\002\000" +
    "\004\037\172\001\002\000\004\014\200\001\002\000\004" +
    "\010\177\001\002\000\006\004\175\010\uffcd\001\002\000" +
    "\004\037\172\001\002\000\004\010\uffce\001\002\000\020" +
    "\004\uffcf\006\uffcf\010\uffcf\013\uffcf\014\uffcf\037\uffcf\060" +
    "\uffcf\001\002\000\024\005\043\007\013\027\046\031\044" +
    "\032\032\033\004\034\033\040\016\053\020\001\002\000" +
    "\006\004\uffcc\010\uffcc\001\002\000\004\002\000\001\002" +
    "\000\004\006\207\001\002\000\006\004\205\006\uffd1\001" +
    "\002\000\024\005\043\007\013\027\046\031\044\032\032" +
    "\033\004\034\033\040\016\053\020\001\002\000\004\006" +
    "\uffd2\001\002\000\020\004\uffd3\006\uffd3\010\uffd3\013\uffd3" +
    "\014\uffd3\037\uffd3\060\uffd3\001\002\000\004\013\uffe6\001" +
    "\002\000\004\011\024\001\002\000\006\013\ufff1\017\213" +
    "\001\002\000\004\011\024\001\002\000\004\013\ufff2\001" +
    "\002\000\004\051\216\001\002\000\024\005\043\007\013" +
    "\027\046\031\044\032\032\033\004\034\033\040\016\053" +
    "\020\001\002\000\004\013\uffdf\001\002\000\004\037\221" +
    "\001\002\000\004\005\222\001\002\000\006\006\223\037" +
    "\224\001\002\000\004\051\235\001\002\000\004\014\231" +
    "\001\002\000\004\006\226\001\002\000\004\051\227\001" +
    "\002\000\004\011\024\001\002\000\004\013\uffea\001\002" +
    "\000\024\005\043\007\013\027\046\031\044\032\032\033" +
    "\004\034\033\040\016\053\020\001\002\000\006\004\233" +
    "\006\uffe7\001\002\000\004\037\224\001\002\000\004\006" +
    "\uffe8\001\002\000\004\011\024\001\002\000\004\013\uffe9" +
    "\001\002\000\036\005\101\006\242\007\076\022\105\024" +
    "\075\035\073\036\103\037\025\041\106\042\100\043\077" +
    "\053\074\057\072\060\050\001\002\000\006\004\244\006" +
    "\uffe2\001\002\000\004\006\243\001\002\000\054\004\uffe4" +
    "\006\uffe4\010\uffe4\011\uffe4\013\uffe4\014\uffe4\015\uffe4\021" +
    "\uffe4\044\uffe4\045\uffe4\046\uffe4\047\uffe4\050\uffe4\054\uffe4" +
    "\055\uffe4\056\uffe4\061\uffe4\062\uffe4\063\uffe4\064\uffe4\065" +
    "\uffe4\001\002\000\054\004\uffe5\006\uffe5\010\uffe5\011\uffe5" +
    "\013\uffe5\014\uffe5\015\uffe5\021\uffe5\044\uffe5\045\uffe5\046" +
    "\uffe5\047\uffe5\050\uffe5\054\uffe5\055\uffe5\056\uffe5\061\uffe5" +
    "\062\uffe5\063\uffe5\064\uffe5\065\uffe5\001\002\000\034\005" +
    "\101\007\076\022\105\024\075\035\073\036\103\037\025" +
    "\041\106\042\100\043\077\053\074\057\072\060\050\001" +
    "\002\000\004\006\uffe3\001\002\000\004\012\247\001\002" +
    "\000\042\005\ufff3\007\ufff3\012\ufff3\013\ufff3\017\ufff3\022" +
    "\ufff3\024\ufff3\035\ufff3\036\ufff3\037\ufff3\041\ufff3\042\ufff3" +
    "\043\ufff3\053\ufff3\057\ufff3\060\ufff3\001\002\000\020\004" +
    "\uffcb\006\uffcb\010\uffcb\013\uffcb\014\uffcb\037\uffcb\060\uffcb" +
    "\001\002\000\006\011\024\015\252\001\002\000\034\005" +
    "\101\007\076\022\105\024\075\035\073\036\103\037\025" +
    "\041\106\042\100\043\077\053\074\057\072\060\050\001" +
    "\002\000\004\013\uffec\001\002\000\004\011\024\001\002" +
    "\000\004\013\uffeb\001\002\000\006\010\260\014\257\001" +
    "\002\000\024\005\043\007\013\027\046\031\044\032\032" +
    "\033\004\034\033\040\016\053\020\001\002\000\020\004" +
    "\uffd4\006\uffd4\010\uffd4\013\uffd4\014\uffd4\037\uffd4\060\uffd4" +
    "\001\002\000\004\010\262\001\002\000\020\004\uffd0\006" +
    "\uffd0\010\uffd0\013\uffd0\014\uffd0\037\uffd0\060\uffd0\001\002" +
    "\000\004\011\264\001\002\000\034\005\101\007\076\022" +
    "\105\024\075\035\073\036\103\037\025\041\106\042\100" +
    "\043\077\053\074\057\072\060\050\001\002\000\004\021" +
    "\272\001\002\000\036\005\101\007\076\012\uffee\022\105" +
    "\024\075\035\073\036\103\037\025\041\106\042\100\043" +
    "\077\053\074\057\072\060\050\001\002\000\004\012\270" +
    "\001\002\000\004\013\ufff0\001\002\000\004\012\uffef\001" +
    "\002\000\004\011\024\001\002\000\036\005\uffed\007\uffed" +
    "\012\uffed\022\uffed\024\uffed\035\uffed\036\uffed\037\uffed\041" +
    "\uffed\042\uffed\043\uffed\053\uffed\057\uffed\060\uffed\001\002" +
    "\000\034\005\101\007\076\022\105\024\075\035\073\036" +
    "\103\037\025\041\106\042\100\043\077\053\074\057\072" +
    "\060\050\001\002\000\004\013\uffca\001\002\000\012\007" +
    "\uffc6\013\uffe1\051\uffc6\052\uffc6\001\002\000\004\013\uffe0" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\275\000\050\002\044\003\046\004\026\005\016\007" +
    "\041\010\050\011\040\012\014\013\022\014\004\015\020" +
    "\016\010\017\011\020\021\022\005\023\027\024\033\025" +
    "\036\041\006\001\001\000\002\001\001\000\006\025\276" +
    "\041\006\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\023\101\026\262\027\067\030\066\031\065\032\064" +
    "\033\063\034\062\035\061\036\107\037\106\040\103\041" +
    "\110\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\014\255\015\020\016\010\017\011\020\021\022\005\001" +
    "\001\000\034\023\101\026\250\027\067\030\066\031\065" +
    "\032\064\033\063\034\062\035\061\036\107\037\106\040" +
    "\103\041\110\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\014\247\015\020\016\010\017" +
    "\011\020\021\022\005\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\050\002\245\003\046\004" +
    "\026\005\016\007\041\010\050\011\040\012\014\013\022" +
    "\014\004\015\020\016\010\017\011\020\021\022\005\023" +
    "\027\024\033\025\036\041\006\001\001\000\002\001\001" +
    "\000\016\014\217\015\020\016\010\017\011\020\021\022" +
    "\005\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\023\101\026\210\027\067\030\066\031\065" +
    "\032\064\033\063\034\062\035\061\036\107\037\106\040" +
    "\103\041\110\001\001\000\034\023\101\026\207\027\067" +
    "\030\066\031\065\032\064\033\063\034\062\035\061\036" +
    "\107\037\106\040\103\041\110\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\014\203\015\020\016\010\017\011\020\021\022\005" +
    "\043\202\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\042\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\041\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\023\101\026" +
    "\070\027\067\030\066\031\065\032\064\033\063\034\062" +
    "\035\061\036\107\037\106\040\103\041\110\001\001\000" +
    "\002\001\001\000\004\052\157\001\001\000\004\051\153" +
    "\001\001\000\004\050\143\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\023\101\031\135\032\064\033\063\034\062\035\061\036" +
    "\107\037\106\040\103\041\110\001\001\000\002\001\001" +
    "\000\006\037\134\041\110\001\001\000\002\001\001\000" +
    "\040\023\101\026\122\027\067\030\066\031\065\032\064" +
    "\033\063\034\062\035\061\036\107\037\106\040\103\041" +
    "\110\054\124\055\123\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\023\101\026\111\027\067\030\066\031" +
    "\065\032\064\033\063\034\062\035\061\036\107\037\106" +
    "\040\103\041\110\053\112\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\023\101\026\116\027\067\030\066\031\065\032" +
    "\064\033\063\034\062\035\061\036\107\037\106\040\103" +
    "\041\110\054\117\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\023\101\026\116\027\067" +
    "\030\066\031\065\032\064\033\063\034\062\035\061\036" +
    "\107\037\106\040\103\041\110\054\121\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\023\101" +
    "\026\130\027\067\030\066\031\065\032\064\033\063\034" +
    "\062\035\061\036\107\037\106\040\103\041\110\001\001" +
    "\000\002\001\001\000\036\023\101\026\132\027\067\030" +
    "\066\031\065\032\064\033\063\034\062\035\061\036\107" +
    "\037\106\040\103\041\110\055\133\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\023\101\030\142\031\065\032" +
    "\064\033\063\034\062\035\061\036\107\037\106\040\103" +
    "\041\110\001\001\000\034\023\101\026\141\027\067\030" +
    "\066\031\065\032\064\033\063\034\062\035\061\036\107" +
    "\037\106\040\103\041\110\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\023\101\031\151\032\064\033\063" +
    "\034\062\035\061\036\107\037\106\040\103\041\110\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\023\101\032\156\033\063\034\062" +
    "\035\061\036\107\037\106\040\103\041\110\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\023\101\033\162\034\062\035\061\036\107\037\106\040" +
    "\103\041\110\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\023\101\034\164\035\061\036" +
    "\107\037\106\040\103\041\110\001\001\000\002\001\001" +
    "\000\002\001\001\000\050\002\167\003\046\004\026\005" +
    "\016\007\041\010\050\011\040\012\014\013\022\014\004" +
    "\015\020\016\010\017\011\020\021\022\005\023\027\024" +
    "\033\025\036\041\006\001\001\000\002\001\001\000\006" +
    "\021\173\044\172\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\021\173\044\175\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\014\200\015" +
    "\020\016\010\017\011\020\021\022\005\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\014\203\015\020\016\010\017\011\020\021" +
    "\022\005\043\205\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\211\001\001\000\002" +
    "\001\001\000\004\004\213\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\014\216\015\020\016\010\017\011" +
    "\020\021\022\005\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\046\224\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\227\001\001\000\002\001\001\000\016" +
    "\014\231\015\020\016\010\017\011\020\021\022\005\001" +
    "\001\000\002\001\001\000\004\046\233\001\001\000\002" +
    "\001\001\000\004\004\235\001\001\000\002\001\001\000" +
    "\036\023\101\026\237\027\067\030\066\031\065\032\064" +
    "\033\063\034\062\035\061\036\107\037\106\040\103\041" +
    "\110\045\240\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\023\101\026" +
    "\237\027\067\030\066\031\065\032\064\033\063\034\062" +
    "\035\061\036\107\037\106\040\103\041\110\045\244\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\252\001\001\000\034\023" +
    "\101\026\253\027\067\030\066\031\065\032\064\033\063" +
    "\034\062\035\061\036\107\037\106\040\103\041\110\001" +
    "\001\000\002\001\001\000\004\004\254\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\014\260\015\020\016" +
    "\010\017\011\020\021\022\005\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\006\265\023\101\026\264\027\067\030\066\031\065" +
    "\032\064\033\063\034\062\035\061\036\107\037\106\040" +
    "\103\041\110\047\266\001\001\000\002\001\001\000\040" +
    "\006\265\023\101\026\264\027\067\030\066\031\065\032" +
    "\064\033\063\034\062\035\061\036\107\037\106\040\103" +
    "\041\110\047\270\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\272\001\001\000\002" +
    "\001\001\000\034\023\101\026\274\027\067\030\066\031" +
    "\065\032\064\033\063\034\062\035\061\036\107\037\106" +
    "\040\103\041\110\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }
   public GestionErroresTiny getErrores() {return errores;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {
  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // PROG ::= INST PCOMA PROG 
            {
              NodoAst RESULT =null;
		NodoAst i = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		NodoAst p = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = new Prog((Inst)i,(Prog)p);	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("PROG",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= PROG EOF 
            {
              Object RESULT =null;
		NodoAst start_val = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROG ::= 
            {
              NodoAst RESULT =null;
			RESULT = new Prog();	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("PROG",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INST ::= ASIG 
            {
              NodoAst RESULT =null;
		NodoAst as = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = as;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INST ::= DEC_VAR 
            {
              NodoAst RESULT =null;
		NodoAst dec = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = dec;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INST ::= TIPO_DEF 
            {
              NodoAst RESULT =null;
		NodoAst def = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = def;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INST ::= FUN_CALL 
            {
              NodoAst RESULT =null;
		NodoAst fc = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = fc;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INST ::= RETURN_VAL 
            {
              NodoAst RESULT =null;
		NodoAst rt = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = rt;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INST ::= BLOCK 
            {
              NodoAst RESULT =null;
		NodoAst bk = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = bk;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INST ::= FUN_DEF 
            {
              NodoAst RESULT =null;
		NodoAst fd = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = fd;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INST ::= IF_BLOCK 
            {
              NodoAst RESULT =null;
		NodoAst ib = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = ib;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INST ::= CASE_BLOCK 
            {
              NodoAst RESULT =null;
		NodoAst cb = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = cb;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INST ::= REPEAT_BLOCK 
            {
              NodoAst RESULT =null;
		NodoAst rp = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = rp;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INST ::= error 
            {
              NodoAst RESULT =null;
			RESULT = new SyntaxError();	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // BLOCK ::= BAP PROG BCL 
            {
              NodoAst RESULT =null;
		NodoAst p = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
			RESULT = new Block((Prog) p);	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BLOCK",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // IF_BLOCK ::= IF EXP0 BLOCK ELSE BLOCK 
            {
              NodoAst RESULT =null;
		NodoAst e = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		NodoAst b = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		NodoAst eb = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = new If((Exp) e, (Block) b, (Block) eb);	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("IF_BLOCK",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // IF_BLOCK ::= IF EXP0 BLOCK 
            {
              NodoAst RESULT =null;
		NodoAst e = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		NodoAst b = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = new If((Exp) e, (Block) b);	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("IF_BLOCK",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CASE_BLOCK ::= CASE EXP0 BAP CASE_MATCH_LIST BCL 
            {
              NodoAst RESULT =null;
		NodoAst e = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		ArrayList<CaseMatch> l = (ArrayList<CaseMatch>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
			RESULT = new Case((Exp) e, l);	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CASE_BLOCK",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CASE_MATCH_LIST ::= CASE_MATCH CASE_MATCH_LIST 
            {
              ArrayList<CaseMatch> RESULT =null;
		NodoAst cm = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		ArrayList<CaseMatch> l = (ArrayList<CaseMatch>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			l.add(0, (CaseMatch) cm); RESULT = l;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CASE_MATCH_LIST",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CASE_MATCH_LIST ::= CASE_MATCH 
            {
              ArrayList<CaseMatch> RESULT =null;
		NodoAst cm = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = new ArrayList(Arrays.asList(new CaseMatch[] {(CaseMatch)cm}));	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CASE_MATCH_LIST",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CASE_MATCH ::= EXP0 THEN BLOCK 
            {
              NodoAst RESULT =null;
		NodoAst e = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		NodoAst b = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = new CaseMatch((Exp) e, (Block) b);	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CASE_MATCH",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // REPEAT_BLOCK ::= REPEAT EXP0 BLOCK 
            {
              NodoAst RESULT =null;
		NodoAst e = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		NodoAst b = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = new Repeat((Exp) e, (Block) b);	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("REPEAT_BLOCK",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // REPEAT_BLOCK ::= REPEAT EXP0 VERT EXP0 BLOCK 
            {
              NodoAst RESULT =null;
		NodoAst e1 = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		NodoAst e2 = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		NodoAst b = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = new Repeat((Exp) e1, (Exp) e2, (Block) b);	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("REPEAT_BLOCK",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FUN_DEF ::= FUN TIPO IDENVARFUN PAP ARGS PCL IGUAL BLOCK 
            {
              NodoAst RESULT =null;
		NodoAst t = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		ArrayList<Argumento> args = (ArrayList<Argumento>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		NodoAst b = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = new DefFun((Tipo) t, new Iden(id), (Block) b, args);	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FUN_DEF",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FUN_DEF ::= FUN TIPO IDENVARFUN PAP PCL IGUAL BLOCK 
            {
              NodoAst RESULT =null;
		NodoAst t = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		NodoAst b = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = new DefFun((Tipo) t, new Iden(id), (Block) b);	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FUN_DEF",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ARGS ::= IDENVARFUN DOSPUNTOS TIPO COMA ARGS 
            {
              ArrayList<Argumento> RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		NodoAst t = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		ArrayList<Argumento> args = (ArrayList<Argumento>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			args.add(0, new Argumento(new Iden(id), (Tipo) t)); RESULT = args;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGS",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ARGS ::= IDENVARFUN DOSPUNTOS TIPO 
            {
              ArrayList<Argumento> RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		NodoAst t = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = new ArrayList(Arrays.asList(
				new Argumento[] {new Argumento(new Iden(id), (Tipo) t)}));	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGS",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // RETURN_VAL ::= RETURN EXP0 
            {
              NodoAst RESULT =null;
		NodoAst e = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = new Return((Exp) e);	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("RETURN_VAL",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FUN_CALL ::= IDENVARFUN PAP PARAMS PCL 
            {
              NodoAst RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		ArrayList<Exp> par = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
			RESULT = new FunCall(new Iden(id), par);	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FUN_CALL",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FUN_CALL ::= IDENVARFUN PAP PCL 
            {
              NodoAst RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
			RESULT = new FunCall(new Iden(id));	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FUN_CALL",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // PARAMS ::= EXP0 COMA PARAMS 
            {
              ArrayList<Exp> RESULT =null;
		NodoAst e = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		ArrayList<Exp> par = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			par.add(0, (Exp) e); RESULT = par;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("PARAMS",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // PARAMS ::= EXP0 
            {
              ArrayList<Exp> RESULT =null;
		NodoAst e = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = new ArrayList(Arrays.asList(new Exp[] {(Exp)e}));	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("PARAMS",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DEC_VAR ::= TIPO IDENVARFUN 
            {
              NodoAst RESULT =null;
		NodoAst t = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		String iden = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = new Dec((Tipo)t, new Iden(iden));	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DEC_VAR",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DEC_VAR ::= TIPO ASIG 
            {
              NodoAst RESULT =null;
		NodoAst t = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		NodoAst as = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = new Dec((Tipo)t, (Asig) as);	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DEC_VAR",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TIPO_DEF ::= TYPE IDENTIPO IGUAL TIPO 
            {
              NodoAst RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		NodoAst t = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = new DefTipo((Tipo) t, new Iden(id));	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO_DEF",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TIPO ::= IDENTIPO 
            {
              NodoAst RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = new TipoNombre(new Iden(id));	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TIPO ::= TIPO_ARRAY 
            {
              NodoAst RESULT =null;
		NodoAst t = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = t;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TIPO ::= TIPO_TUPLA 
            {
              NodoAst RESULT =null;
		NodoAst t = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = t;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TIPO ::= TIPO_DICT 
            {
              NodoAst RESULT =null;
		NodoAst t = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = t;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TIPO ::= TIPO_STRUCT 
            {
              NodoAst RESULT =null;
		NodoAst t = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = t;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TIPO ::= TIPO_PUNT 
            {
              NodoAst RESULT =null;
		NodoAst t = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = t;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TIPO ::= TINT 
            {
              NodoAst RESULT =null;
			RESULT = new TipoInt();	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TIPO ::= TBOOL 
            {
              NodoAst RESULT =null;
			RESULT = new TipoBool();	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TIPO ::= TSTRING 
            {
              NodoAst RESULT =null;
			RESULT = new TipoString();	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TIPO ::= TDEC 
            {
              NodoAst RESULT =null;
			RESULT = new TipoDec();	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TIPO_ARRAY ::= CAP TIPO CCL 
            {
              NodoAst RESULT =null;
		NodoAst t = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
			RESULT = new TipoArray((Tipo) t);	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO_ARRAY",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TIPO_TUPLA ::= PAP TIPO_TUPLA_LISTA PCL 
            {
              NodoAst RESULT =null;
		ArrayList<Tipo> ls = (ArrayList<Tipo>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
			RESULT = new TipoTupla(ls);	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO_TUPLA",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TIPO_TUPLA_LISTA ::= TIPO COMA TIPO_TUPLA_LISTA 
            {
              ArrayList<Tipo> RESULT =null;
		NodoAst t = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		ArrayList<Tipo> ls = (ArrayList<Tipo>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			ls.add(0, (Tipo) t); RESULT = ls;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO_TUPLA_LISTA",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TIPO_TUPLA_LISTA ::= TIPO 
            {
              ArrayList<Tipo> RESULT =null;
		NodoAst t = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = new ArrayList(Arrays.asList(new Tipo[] {(Tipo)t}));	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO_TUPLA_LISTA",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TIPO_DICT ::= CAP TIPO DOSPUNTOS TIPO CCL 
            {
              NodoAst RESULT =null;
		NodoAst cv = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		NodoAst vl = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
			RESULT = new TipoDict((Tipo) cv, (Tipo) vl);	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO_DICT",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TIPO_STRUCT ::= STRUCT CAP LISTA_STRUCT CCL 
            {
              NodoAst RESULT =null;
		ArrayList<CampoStruct> ls = (ArrayList<CampoStruct>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
			RESULT = new TipoStruct(ls);	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO_STRUCT",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // LISTA_STRUCT ::= CAMPO_STRUCT COMA LISTA_STRUCT 
            {
              ArrayList<CampoStruct> RESULT =null;
		NodoAst cp = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		ArrayList<CampoStruct> ls = (ArrayList<CampoStruct>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			ls.add(0, (CampoStruct) cp); RESULT = ls;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LISTA_STRUCT",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // LISTA_STRUCT ::= CAMPO_STRUCT 
            {
              ArrayList<CampoStruct> RESULT =null;
		NodoAst cp = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = new ArrayList(Arrays.asList(new CampoStruct[] {(CampoStruct) cp}));	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LISTA_STRUCT",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CAMPO_STRUCT ::= IDENVARFUN DOSPUNTOS TIPO 
            {
              NodoAst RESULT =null;
		String iden = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		NodoAst t = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = new CampoStruct(new Iden(iden), (Tipo) t);	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CAMPO_STRUCT",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TIPO_PUNT ::= REF TIPO 
            {
              NodoAst RESULT =null;
		NodoAst t = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = new TipoPunt((Tipo) t);	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO_PUNT",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ASIG ::= ASIG0 IGUAL EXP0 
            {
              NodoAst RESULT =null;
		NodoAst as = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		NodoAst e = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = new Asig((Asignable) as, (Exp) e);	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ASIG",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ASIG0 ::= ASIG0 PUNTO IDENVARFUN 
            {
              NodoAst RESULT =null;
		NodoAst as = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = new Asignable((Asignable) as, new Iden(id));	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ASIG0",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ASIG0 ::= ASIG0 CAP EXP0 CCL 
            {
              NodoAst RESULT =null;
		NodoAst as = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		NodoAst exp = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
			RESULT = new Asignable((Exp) exp, (Asignable) as);	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ASIG0",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ASIG0 ::= DEREF ASIG1 
            {
              NodoAst RESULT =null;
		NodoAst as = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = new Asignable((Asignable) as);	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ASIG0",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ASIG0 ::= IDENVARFUN 
            {
              NodoAst RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = new Asignable(new Iden(id));	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ASIG0",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ASIG1 ::= IDENVARFUN 
            {
              NodoAst RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = new Asignable(new Iden(id));	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ASIG1",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ASIG1 ::= PAP ASIG0 PCL 
            {
              NodoAst RESULT =null;
		NodoAst as = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
			RESULT = as;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ASIG1",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXP0 ::= EXP1 OR EXP0 
            {
              NodoAst RESULT =null;
		NodoAst e1 = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		NodoAst e2 = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = new Exp(Operator.OR, (Exp) e1, (Exp) e2);	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP0",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXP0 ::= EXP1 
            {
              NodoAst RESULT =null;
		NodoAst e = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = e;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP0",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXP1 ::= EXP1 AND EXP2 
            {
              NodoAst RESULT =null;
		NodoAst e1 = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		NodoAst e2 = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = new Exp(Operator.AND, (Exp) e1, (Exp) e2);	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP1",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXP1 ::= EXP2 
            {
              NodoAst RESULT =null;
		NodoAst e = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = e;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP1",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXP2 ::= NOT EXP3 
            {
              NodoAst RESULT =null;
		NodoAst e = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = new Exp(Operator.NOT, (Exp) e);	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP2",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXP2 ::= EXP3 
            {
              NodoAst RESULT =null;
		NodoAst e = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = e;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP2",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXP3 ::= EXP4 OP0 EXP3 
            {
              NodoAst RESULT =null;
		NodoAst e1 = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Operator op = (Operator)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		NodoAst e2 = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = new Exp(op, (Exp) e1, (Exp) e2);	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP3",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXP3 ::= EXP4 
            {
              NodoAst RESULT =null;
		NodoAst e = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = e;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP3",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXP4 ::= EXP5 OP1 EXP4 
            {
              NodoAst RESULT =null;
		NodoAst e1 = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Operator op = (Operator)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		NodoAst e2 = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = new Exp(op, (Exp) e1, (Exp) e2);	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP4",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXP4 ::= EXP5 
            {
              NodoAst RESULT =null;
		NodoAst e = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = e;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP4",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXP5 ::= EXP6 OP2 EXP5 
            {
              NodoAst RESULT =null;
		NodoAst e1 = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Operator op = (Operator)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		NodoAst e2 = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = new Exp(op, (Exp) e1, (Exp) e2);	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP5",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXP5 ::= EXP6 
            {
              NodoAst RESULT =null;
		NodoAst e = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = e;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP5",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXP6 ::= EXP7 MOD EXP6 
            {
              NodoAst RESULT =null;
		NodoAst e1 = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		NodoAst e2 = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = new Exp(Operator.MOD, (Exp) e1, (Exp) e2);	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP6",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXP6 ::= EXP7 
            {
              NodoAst RESULT =null;
		NodoAst e = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = e;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP6",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXP7 ::= EXP8 
            {
              NodoAst RESULT =null;
		NodoAst e = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = e;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP7",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXP7 ::= EXP9 
            {
              NodoAst RESULT =null;
		NodoAst e = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = e;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP7",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXP8 ::= CONST 
            {
              NodoAst RESULT =null;
		NodoAst c = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = c;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP8",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXP8 ::= FUN_CALL 
            {
              NodoAst RESULT =null;
		NodoAst fc = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = fc;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP8",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXP8 ::= PAP EXP0 PCL 
            {
              NodoAst RESULT =null;
		NodoAst e = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
			RESULT = e;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP8",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXP9 ::= REF EXP9 
            {
              NodoAst RESULT =null;
		NodoAst e = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = new Exp(Operator.REF, (Exp) e);	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP9",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXP9 ::= ASIG0 
            {
              NodoAst RESULT =null;
		NodoAst e = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = new ExpAsig((Asignable) e);	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP9",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CONST ::= TRUE 
            {
              NodoAst RESULT =null;
			RESULT = new ConstBool("true");	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CONST",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CONST ::= FALSE 
            {
              NodoAst RESULT =null;
			RESULT = new ConstBool("false");	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CONST",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CONST ::= ENT 
            {
              NodoAst RESULT =null;
		String e = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = new ConstInt(e);	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CONST",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CONST ::= DEC 
            {
              NodoAst RESULT =null;
		String d = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = new ConstDec(d);	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CONST",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CONST ::= INF 
            {
              NodoAst RESULT =null;
			RESULT = new ConstInt("inf");	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CONST",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CONST ::= NULL 
            {
              NodoAst RESULT =null;
			RESULT = new ConstNull();	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CONST",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CONST ::= STRING 
            {
              NodoAst RESULT =null;
		String s = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = new ConstString(s);	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CONST",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CONST ::= CAP LISTA CCL 
            {
              NodoAst RESULT =null;
		ArrayList<Exp> l = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
			RESULT = new ConstArray(l);	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CONST",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CONST ::= PAP TUPLA PCL 
            {
              NodoAst RESULT =null;
		ArrayList<Exp> t = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
			RESULT = new ConstTupla(t);	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CONST",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CONST ::= CAP DICT CCL 
            {
              NodoAst RESULT =null;
		ArrayList<DictPair> d = (ArrayList<DictPair>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
			RESULT = new ConstDict(d);	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CONST",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // LISTA ::= EXP0 COMA LISTA 
            {
              ArrayList<Exp> RESULT =null;
		NodoAst e = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		ArrayList<Exp> l = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			l.add(0, (Exp)e); RESULT = l;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LISTA",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // LISTA ::= EXP0 
            {
              ArrayList<Exp> RESULT =null;
		NodoAst e = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = new ArrayList(Arrays.asList(new Exp[] {(Exp)e}));	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LISTA",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // TUPLA ::= EXP0 COMA LISTA 
            {
              ArrayList<Exp> RESULT =null;
		NodoAst e = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		ArrayList<Exp> l = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			l.add(0, (Exp)e); RESULT = l;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TUPLA",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // DICT ::= EXP0 DOSPUNTOS EXP0 COMA DICT 
            {
              ArrayList<DictPair> RESULT =null;
		NodoAst e1 = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		NodoAst e2 = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		ArrayList<DictPair> d = (ArrayList<DictPair>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			d.add(0, new DictPair((Exp)e1, (Exp)e2)); RESULT = d;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DICT",43, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // DICT ::= EXP0 DOSPUNTOS EXP0 
            {
              ArrayList<DictPair> RESULT =null;
		NodoAst e1 = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		NodoAst e2 = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = new ArrayList(Arrays.asList(
			new DictPair[] {new DictPair((Exp)e1, (Exp)e2)}));	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DICT",43, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // OP0 ::= ES_IGUAL 
            {
              Operator RESULT =null;
			RESULT = Operator.ES_IGUAL;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP0",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // OP0 ::= MENOR 
            {
              Operator RESULT =null;
			RESULT = Operator.MENOR;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP0",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // OP0 ::= MAYOR 
            {
              Operator RESULT =null;
			RESULT = Operator.MAYOR;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP0",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // OP0 ::= MAYIG 
            {
              Operator RESULT =null;
			RESULT = Operator.MAYIG;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP0",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // OP0 ::= MENIG 
            {
              Operator RESULT =null;
			RESULT = Operator.MENIG;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP0",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // OP1 ::= MAS 
            {
              Operator RESULT =null;
			RESULT = Operator.MAS;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // OP1 ::= MENOS 
            {
              Operator RESULT =null;
			RESULT = Operator.MENOS;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // OP1 ::= CONCAT 
            {
              Operator RESULT =null;
			RESULT = Operator.CONCAT;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // OP2 ::= POR 
            {
              Operator RESULT =null;
			RESULT = Operator.POR;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP2",40, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // OP2 ::= DIV 
            {
              Operator RESULT =null;
			RESULT = Operator.DIV;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP2",40, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}


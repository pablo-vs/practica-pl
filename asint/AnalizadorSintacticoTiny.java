
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Sun Jun 14 11:46:14 CEST 2020
//----------------------------------------------------

package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import alex.TokenValue;
import errors.GestionErroresTiny;
import ast.*;
import ast.tipos.*;
import ast.exp.*;
import java.util.ArrayList;
import java.util.Arrays;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Sun Jun 14 11:46:14 CEST 2020
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\154\000\002\002\005\000\002\002\004\000\002\002" +
    "\002\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\004\005\000\002\005" +
    "\007\000\002\005\005\000\002\007\007\000\002\047\004" +
    "\000\002\047\003\000\002\006\005\000\002\010\005\000" +
    "\002\010\007\000\002\011\012\000\002\011\011\000\002" +
    "\046\007\000\002\046\005\000\002\012\004\000\002\023" +
    "\006\000\002\023\005\000\002\045\005\000\002\045\003" +
    "\000\002\024\004\000\002\024\004\000\002\013\006\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\015\005\000\002\016\005\000\002\043\005\000" +
    "\002\043\003\000\002\017\007\000\002\020\006\000\002" +
    "\044\005\000\002\044\003\000\002\021\005\000\002\022" +
    "\004\000\002\025\005\000\002\041\005\000\002\041\006" +
    "\000\002\041\004\000\002\041\003\000\002\042\003\000" +
    "\002\042\005\000\002\026\005\000\002\026\003\000\002" +
    "\027\005\000\002\027\003\000\002\030\004\000\002\030" +
    "\003\000\002\031\005\000\002\031\003\000\002\032\005" +
    "\000\002\032\003\000\002\033\005\000\002\033\003\000" +
    "\002\034\005\000\002\034\003\000\002\035\003\000\002" +
    "\035\003\000\002\036\003\000\002\036\003\000\002\036" +
    "\005\000\002\037\004\000\002\037\003\000\002\040\003" +
    "\000\002\040\003\000\002\040\003\000\002\040\003\000" +
    "\002\040\003\000\002\040\003\000\002\040\003\000\002" +
    "\040\005\000\002\040\005\000\002\040\005\000\002\054" +
    "\005\000\002\054\003\000\002\053\005\000\002\055\007" +
    "\000\002\055\005\000\002\050\003\000\002\050\003\000" +
    "\002\050\003\000\002\050\003\000\002\050\003\000\002" +
    "\051\003\000\002\051\003\000\002\051\003\000\002\052" +
    "\003\000\002\052\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\276\000\050\002\uffff\003\036\007\023\016\045\017" +
    "\042\020\030\021\004\022\031\023\033\024\014\025\010" +
    "\026\024\027\027\030\035\031\043\041\041\042\013\052" +
    "\017\057\047\001\002\000\020\004\uffd6\005\uffd6\006\uffd6" +
    "\011\uffd6\012\uffd6\031\uffd6\057\uffd6\001\002\000\006\031" +
    "\277\057\047\001\002\000\020\004\uffd9\005\uffd9\006\uffd9" +
    "\011\uffd9\012\uffd9\031\uffd9\057\uffd9\001\002\000\010\042" +
    "\060\050\275\051\057\001\002\000\034\031\072\032\106" +
    "\033\100\034\077\035\073\036\103\037\105\040\075\041" +
    "\101\042\076\052\074\056\071\057\047\001\002\000\020" +
    "\004\uffdc\005\uffdc\006\uffdc\011\uffdc\012\uffdc\031\uffdc\057" +
    "\uffdc\001\002\000\020\004\uffdb\005\uffdb\006\uffdb\011\uffdb" +
    "\012\uffdb\031\uffdb\057\uffdb\001\002\000\024\016\045\017" +
    "\042\020\030\021\004\022\031\031\207\041\041\042\013" +
    "\052\017\001\002\000\034\031\072\032\106\033\100\034" +
    "\077\035\073\036\103\037\105\040\075\041\101\042\076" +
    "\052\074\056\071\057\047\001\002\000\004\011\ufffa\001" +
    "\002\000\004\011\ufff7\001\002\000\024\016\045\017\042" +
    "\020\030\021\004\022\031\031\207\041\041\042\013\052" +
    "\017\001\002\000\020\004\uffdd\005\uffdd\006\uffdd\011\uffdd" +
    "\012\uffdd\031\uffdd\057\uffdd\001\002\000\020\004\uffda\005" +
    "\uffda\006\uffda\011\uffda\012\uffda\031\uffda\057\uffda\001\002" +
    "\000\004\011\ufffc\001\002\000\050\003\036\007\023\010" +
    "\uffff\016\045\017\042\020\030\021\004\022\031\023\033" +
    "\024\014\025\010\026\024\027\027\030\035\031\043\041" +
    "\041\042\013\052\017\057\047\001\002\000\024\016\045" +
    "\017\042\020\030\021\004\022\031\031\207\041\041\042" +
    "\013\052\017\001\002\000\004\011\ufff9\001\002\000\004" +
    "\011\ufffb\001\002\000\004\031\225\001\002\000\020\004" +
    "\uffd7\005\uffd7\006\uffd7\011\uffd7\012\uffd7\031\uffd7\057\uffd7" +
    "\001\002\000\020\004\uffd5\005\uffd5\006\uffd5\011\uffd5\012" +
    "\uffd5\031\uffd5\057\uffd5\001\002\000\004\011\ufffd\001\002" +
    "\000\034\031\072\032\106\033\100\034\077\035\073\036" +
    "\103\037\105\040\075\041\101\042\076\052\074\056\071" +
    "\057\047\001\002\000\004\011\ufffe\001\002\000\034\031" +
    "\072\032\106\033\100\034\077\035\073\036\103\037\105" +
    "\040\075\041\101\042\076\052\074\056\071\057\047\001" +
    "\002\000\004\011\ufff4\001\002\000\004\011\ufff8\001\002" +
    "\000\004\011\ufff6\001\002\000\024\016\045\017\042\020" +
    "\030\021\004\022\031\031\207\041\041\042\013\052\017" +
    "\001\002\000\020\004\uffd8\005\uffd8\006\uffd8\011\uffd8\012" +
    "\uffd8\031\uffd8\057\uffd8\001\002\000\016\031\uffde\041\136" +
    "\042\uffc6\050\uffc6\051\uffc6\057\uffde\001\002\000\004\002" +
    "\212\001\002\000\004\042\200\001\002\000\004\011\176" +
    "\001\002\000\006\031\053\041\051\001\002\000\004\011" +
    "\ufff5\001\002\000\006\031\054\057\047\001\002\000\062" +
    "\004\uffc7\005\uffc7\006\uffc7\007\uffc7\011\uffc7\012\uffc7\013" +
    "\uffc7\015\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7" +
    "\047\uffc7\050\uffc7\051\uffc7\053\uffc7\054\uffc7\055\uffc7\060" +
    "\uffc7\061\uffc7\062\uffc7\063\uffc7\064\uffc7\001\002\000\062" +
    "\004\uffc5\005\uffc5\006\uffc5\007\uffc5\011\uffc5\012\uffc5\013" +
    "\uffc5\015\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5" +
    "\047\uffc5\050\uffc5\051\uffc5\053\uffc5\054\uffc5\055\uffc5\060" +
    "\uffc5\061\uffc5\062\uffc5\063\uffc5\064\uffc5\001\002\000\060" +
    "\004\uffc6\005\uffc6\006\uffc6\007\uffc6\011\uffc6\012\uffc6\013" +
    "\uffc6\015\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6\046\uffc6" +
    "\047\uffc6\051\uffc6\053\uffc6\054\uffc6\055\uffc6\060\uffc6\061" +
    "\uffc6\062\uffc6\063\uffc6\064\uffc6\001\002\000\010\005\056" +
    "\042\060\051\057\001\002\000\062\004\uffc4\005\uffc4\006" +
    "\uffc4\007\uffc4\011\uffc4\012\uffc4\013\uffc4\015\uffc4\042\uffc4" +
    "\043\uffc4\044\uffc4\045\uffc4\046\uffc4\047\uffc4\050\uffc4\051" +
    "\uffc4\053\uffc4\054\uffc4\055\uffc4\060\uffc4\061\uffc4\062\uffc4" +
    "\063\uffc4\064\uffc4\001\002\000\004\031\175\001\002\000" +
    "\034\031\072\032\106\033\100\034\077\035\073\036\103" +
    "\037\105\040\075\041\101\042\076\052\074\056\071\057" +
    "\047\001\002\000\054\004\uffb6\005\uffb6\006\uffb6\007\uffb6" +
    "\011\uffb6\012\uffb6\013\uffb6\015\uffb6\043\uffb6\044\uffb6\045" +
    "\uffb6\046\uffb6\047\173\053\uffb6\054\uffb6\055\uffb6\060\uffb6" +
    "\061\uffb6\062\uffb6\063\uffb6\064\uffb6\001\002\000\052\004" +
    "\uffb8\005\uffb8\006\uffb8\007\uffb8\011\uffb8\012\uffb8\013\uffb8" +
    "\015\uffb8\043\uffb8\044\uffb8\045\171\046\170\053\uffb8\054" +
    "\uffb8\055\uffb8\060\uffb8\061\uffb8\062\uffb8\063\uffb8\064\uffb8" +
    "\001\002\000\046\004\uffba\005\uffba\006\uffba\007\uffba\011" +
    "\uffba\012\uffba\013\uffba\015\uffba\043\162\044\165\053\164" +
    "\054\uffba\055\uffba\060\uffba\061\uffba\062\uffba\063\uffba\064" +
    "\uffba\001\002\000\040\004\uffbc\005\uffbc\006\uffbc\007\uffbc" +
    "\011\uffbc\012\uffbc\013\uffbc\015\uffbc\054\uffbc\055\uffbc\060" +
    "\157\061\155\062\160\063\156\064\154\001\002\000\026" +
    "\004\uffbe\005\uffbe\006\uffbe\007\uffbe\011\uffbe\012\uffbe\013" +
    "\uffbe\015\uffbe\054\uffbe\055\uffbe\001\002\000\026\004\uffc0" +
    "\005\uffc0\006\uffc0\007\uffc0\011\uffc0\012\uffc0\013\uffc0\015" +
    "\uffc0\054\uffc0\055\uffc0\001\002\000\026\004\uffc2\005\uffc2" +
    "\006\uffc2\007\uffc2\011\uffc2\012\uffc2\013\uffc2\015\uffc2\054" +
    "\147\055\150\001\002\000\004\006\146\001\002\000\032" +
    "\031\072\032\106\033\100\034\077\035\073\036\103\037" +
    "\105\040\075\041\101\042\076\052\074\057\047\001\002" +
    "\000\062\004\uffc6\005\uffc6\006\uffc6\007\uffc6\011\uffc6\012" +
    "\uffc6\013\uffc6\015\uffc6\041\136\042\uffc6\043\uffc6\044\uffc6" +
    "\045\uffc6\046\uffc6\047\uffc6\051\uffc6\053\uffc6\054\uffc6\055" +
    "\uffc6\060\uffc6\061\uffc6\062\uffc6\063\uffc6\064\uffc6\001\002" +
    "\000\054\004\uffae\005\uffae\006\uffae\007\uffae\011\uffae\012" +
    "\uffae\013\uffae\015\uffae\043\uffae\044\uffae\045\uffae\046\uffae" +
    "\047\uffae\053\uffae\054\uffae\055\uffae\060\uffae\061\uffae\062" +
    "\uffae\063\uffae\064\uffae\001\002\000\010\031\054\052\074" +
    "\057\047\001\002\000\054\004\uffaa\005\uffaa\006\uffaa\007" +
    "\uffaa\011\uffaa\012\uffaa\013\uffaa\015\uffaa\043\uffaa\044\uffaa" +
    "\045\uffaa\046\uffaa\047\uffaa\053\uffaa\054\uffaa\055\uffaa\060" +
    "\uffaa\061\uffaa\062\uffaa\063\uffaa\064\uffaa\001\002\000\034" +
    "\031\072\032\106\033\100\034\077\035\073\036\103\037" +
    "\105\040\075\041\101\042\076\052\074\056\071\057\047" +
    "\001\002\000\054\004\uffa8\005\uffa8\006\uffa8\007\uffa8\011" +
    "\uffa8\012\uffa8\013\uffa8\015\uffa8\043\uffa8\044\uffa8\045\uffa8" +
    "\046\uffa8\047\uffa8\053\uffa8\054\uffa8\055\uffa8\060\uffa8\061" +
    "\uffa8\062\uffa8\063\uffa8\064\uffa8\001\002\000\054\004\uffab" +
    "\005\uffab\006\uffab\007\uffab\011\uffab\012\uffab\013\uffab\015" +
    "\uffab\043\uffab\044\uffab\045\uffab\046\uffab\047\uffab\053\uffab" +
    "\054\uffab\055\uffab\060\uffab\061\uffab\062\uffab\063\uffab\064" +
    "\uffab\001\002\000\034\031\072\032\106\033\100\034\077" +
    "\035\073\036\103\037\105\040\075\041\101\042\076\052" +
    "\074\056\071\057\047\001\002\000\054\004\uffb2\005\uffb2" +
    "\006\uffb2\007\uffb2\011\uffb2\012\uffb2\013\uffb2\015\uffb2\043" +
    "\uffb2\044\uffb2\045\uffb2\046\uffb2\047\uffb2\053\uffb2\054\uffb2" +
    "\055\uffb2\060\uffb2\061\uffb2\062\uffb2\063\uffb2\064\uffb2\001" +
    "\002\000\054\004\uffad\005\uffad\006\uffad\007\uffad\011\uffad" +
    "\012\uffad\013\uffad\015\uffad\043\uffad\044\uffad\045\uffad\046" +
    "\uffad\047\uffad\053\uffad\054\uffad\055\uffad\060\uffad\061\uffad" +
    "\062\uffad\063\uffad\064\uffad\001\002\000\054\004\uffb3\005" +
    "\uffb3\006\uffb3\007\uffb3\011\uffb3\012\uffb3\013\uffb3\015\uffb3" +
    "\043\uffb3\044\uffb3\045\uffb3\046\uffb3\047\uffb3\053\uffb3\054" +
    "\uffb3\055\uffb3\060\uffb3\061\uffb3\062\uffb3\063\uffb3\064\uffb3" +
    "\001\002\000\054\004\uffa9\005\uffa9\006\uffa9\007\uffa9\011" +
    "\uffa9\012\uffa9\013\uffa9\015\uffa9\043\uffa9\044\uffa9\045\uffa9" +
    "\046\uffa9\047\uffa9\053\uffa9\054\uffa9\055\uffa9\060\uffa9\061" +
    "\uffa9\062\uffa9\063\uffa9\064\uffa9\001\002\000\054\004\uffac" +
    "\005\uffac\006\uffac\007\uffac\011\uffac\012\uffac\013\uffac\015" +
    "\uffac\043\uffac\044\uffac\045\uffac\046\uffac\047\uffac\053\uffac" +
    "\054\uffac\055\uffac\060\uffac\061\uffac\062\uffac\063\uffac\064" +
    "\uffac\001\002\000\054\004\uffb4\005\uffb4\006\uffb4\007\uffb4" +
    "\011\uffb4\012\uffb4\013\uffb4\015\uffb4\043\uffb4\044\uffb4\045" +
    "\uffb4\046\uffb4\047\uffb4\053\uffb4\054\uffb4\055\uffb4\060\uffb4" +
    "\061\uffb4\062\uffb4\063\uffb4\064\uffb4\001\002\000\054\004" +
    "\uffb5\005\uffb5\006\uffb5\007\uffb5\011\uffb5\012\uffb5\013\uffb5" +
    "\015\uffb5\043\uffb5\044\uffb5\045\uffb5\046\uffb5\047\uffb5\053" +
    "\uffb5\054\uffb5\055\uffb5\060\uffb5\061\uffb5\062\uffb5\063\uffb5" +
    "\064\uffb5\001\002\000\060\004\uffaf\005\uffaf\006\uffaf\007" +
    "\uffaf\011\uffaf\012\uffaf\013\uffaf\015\uffaf\042\060\043\uffaf" +
    "\044\uffaf\045\uffaf\046\uffaf\047\uffaf\051\057\053\uffaf\054" +
    "\uffaf\055\uffaf\060\uffaf\061\uffaf\062\uffaf\063\uffaf\064\uffaf" +
    "\001\002\000\006\004\115\005\116\001\002\000\004\005" +
    "\114\001\002\000\054\004\uffa6\005\uffa6\006\uffa6\007\uffa6" +
    "\011\uffa6\012\uffa6\013\uffa6\015\uffa6\043\uffa6\044\uffa6\045" +
    "\uffa6\046\uffa6\047\uffa6\053\uffa6\054\uffa6\055\uffa6\060\uffa6" +
    "\061\uffa6\062\uffa6\063\uffa6\064\uffa6\001\002\000\034\031" +
    "\072\032\106\033\100\034\077\035\073\036\103\037\105" +
    "\040\075\041\101\042\076\052\074\056\071\057\047\001" +
    "\002\000\054\004\uffb1\005\uffb1\006\uffb1\007\uffb1\011\uffb1" +
    "\012\uffb1\013\uffb1\015\uffb1\043\uffb1\044\uffb1\045\uffb1\046" +
    "\uffb1\047\uffb1\053\uffb1\054\uffb1\055\uffb1\060\uffb1\061\uffb1" +
    "\062\uffb1\063\uffb1\064\uffb1\001\002\000\010\004\121\005" +
    "\uffa3\006\uffa3\001\002\000\004\005\uffa2\001\002\000\034" +
    "\031\072\032\106\033\100\034\077\035\073\036\103\037" +
    "\105\040\075\041\101\042\076\052\074\056\071\057\047" +
    "\001\002\000\006\005\uffa4\006\uffa4\001\002\000\010\004" +
    "\121\006\uffa3\012\130\001\002\000\004\006\127\001\002" +
    "\000\004\006\126\001\002\000\054\004\uffa7\005\uffa7\006" +
    "\uffa7\007\uffa7\011\uffa7\012\uffa7\013\uffa7\015\uffa7\043\uffa7" +
    "\044\uffa7\045\uffa7\046\uffa7\047\uffa7\053\uffa7\054\uffa7\055" +
    "\uffa7\060\uffa7\061\uffa7\062\uffa7\063\uffa7\064\uffa7\001\002" +
    "\000\054\004\uffa5\005\uffa5\006\uffa5\007\uffa5\011\uffa5\012" +
    "\uffa5\013\uffa5\015\uffa5\043\uffa5\044\uffa5\045\uffa5\046\uffa5" +
    "\047\uffa5\053\uffa5\054\uffa5\055\uffa5\060\uffa5\061\uffa5\062" +
    "\uffa5\063\uffa5\064\uffa5\001\002\000\034\031\072\032\106" +
    "\033\100\034\077\035\073\036\103\037\105\040\075\041" +
    "\101\042\076\052\074\056\071\057\047\001\002\000\006" +
    "\004\132\006\uffa0\001\002\000\034\031\072\032\106\033" +
    "\100\034\077\035\073\036\103\037\105\040\075\041\101" +
    "\042\076\052\074\056\071\057\047\001\002\000\004\012" +
    "\130\001\002\000\004\006\uffa1\001\002\000\054\004\uffb0" +
    "\005\uffb0\006\uffb0\007\uffb0\011\uffb0\012\uffb0\013\uffb0\015" +
    "\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0\047\uffb0\053\uffb0" +
    "\054\uffb0\055\uffb0\060\uffb0\061\uffb0\062\uffb0\063\uffb0\064" +
    "\uffb0\001\002\000\036\005\141\031\072\032\106\033\100" +
    "\034\077\035\073\036\103\037\105\040\075\041\101\042" +
    "\076\052\074\056\071\057\047\001\002\000\006\004\143" +
    "\005\uffe2\001\002\000\004\005\142\001\002\000\054\004" +
    "\uffe4\005\uffe4\006\uffe4\007\uffe4\011\uffe4\012\uffe4\013\uffe4" +
    "\015\uffe4\043\uffe4\044\uffe4\045\uffe4\046\uffe4\047\uffe4\053" +
    "\uffe4\054\uffe4\055\uffe4\060\uffe4\061\uffe4\062\uffe4\063\uffe4" +
    "\064\uffe4\001\002\000\054\004\uffe5\005\uffe5\006\uffe5\007" +
    "\uffe5\011\uffe5\012\uffe5\013\uffe5\015\uffe5\043\uffe5\044\uffe5" +
    "\045\uffe5\046\uffe5\047\uffe5\053\uffe5\054\uffe5\055\uffe5\060" +
    "\uffe5\061\uffe5\062\uffe5\063\uffe5\064\uffe5\001\002\000\034" +
    "\031\072\032\106\033\100\034\077\035\073\036\103\037" +
    "\105\040\075\041\101\042\076\052\074\056\071\057\047" +
    "\001\002\000\004\005\uffe3\001\002\000\026\004\uffbf\005" +
    "\uffbf\006\uffbf\007\uffbf\011\uffbf\012\uffbf\013\uffbf\015\uffbf" +
    "\054\uffbf\055\uffbf\001\002\000\062\004\uffc8\005\uffc8\006" +
    "\uffc8\007\uffc8\011\uffc8\012\uffc8\013\uffc8\015\uffc8\042\uffc8" +
    "\043\uffc8\044\uffc8\045\uffc8\046\uffc8\047\uffc8\050\uffc8\051" +
    "\uffc8\053\uffc8\054\uffc8\055\uffc8\060\uffc8\061\uffc8\062\uffc8" +
    "\063\uffc8\064\uffc8\001\002\000\034\031\072\032\106\033" +
    "\100\034\077\035\073\036\103\037\105\040\075\041\101" +
    "\042\076\052\074\056\071\057\047\001\002\000\034\031" +
    "\072\032\106\033\100\034\077\035\073\036\103\037\105" +
    "\040\075\041\101\042\076\052\074\056\071\057\047\001" +
    "\002\000\022\004\uffc3\005\uffc3\006\uffc3\007\uffc3\011\uffc3" +
    "\012\uffc3\013\uffc3\015\uffc3\001\002\000\026\004\uffc1\005" +
    "\uffc1\006\uffc1\007\uffc1\011\uffc1\012\uffc1\013\uffc1\015\uffc1" +
    "\054\uffc1\055\uffc1\001\002\000\032\031\072\032\106\033" +
    "\100\034\077\035\073\036\103\037\105\040\075\041\101" +
    "\042\076\052\074\057\047\001\002\000\032\031\uff9b\032" +
    "\uff9b\033\uff9b\034\uff9b\035\uff9b\036\uff9b\037\uff9b\040\uff9b" +
    "\041\uff9b\042\uff9b\052\uff9b\057\uff9b\001\002\000\032\031" +
    "\uff9e\032\uff9e\033\uff9e\034\uff9e\035\uff9e\036\uff9e\037\uff9e" +
    "\040\uff9e\041\uff9e\042\uff9e\052\uff9e\057\uff9e\001\002\000" +
    "\032\031\uff9c\032\uff9c\033\uff9c\034\uff9c\035\uff9c\036\uff9c" +
    "\037\uff9c\040\uff9c\041\uff9c\042\uff9c\052\uff9c\057\uff9c\001" +
    "\002\000\032\031\uff9d\032\uff9d\033\uff9d\034\uff9d\035\uff9d" +
    "\036\uff9d\037\uff9d\040\uff9d\041\uff9d\042\uff9d\052\uff9d\057" +
    "\uff9d\001\002\000\032\031\uff9f\032\uff9f\033\uff9f\034\uff9f" +
    "\035\uff9f\036\uff9f\037\uff9f\040\uff9f\041\uff9f\042\uff9f\052" +
    "\uff9f\057\uff9f\001\002\000\026\004\uffbd\005\uffbd\006\uffbd" +
    "\007\uffbd\011\uffbd\012\uffbd\013\uffbd\015\uffbd\054\uffbd\055" +
    "\uffbd\001\002\000\032\031\uff9a\032\uff9a\033\uff9a\034\uff9a" +
    "\035\uff9a\036\uff9a\037\uff9a\040\uff9a\041\uff9a\042\uff9a\052" +
    "\uff9a\057\uff9a\001\002\000\032\031\072\032\106\033\100" +
    "\034\077\035\073\036\103\037\105\040\075\041\101\042" +
    "\076\052\074\057\047\001\002\000\032\031\uff98\032\uff98" +
    "\033\uff98\034\uff98\035\uff98\036\uff98\037\uff98\040\uff98\041" +
    "\uff98\042\uff98\052\uff98\057\uff98\001\002\000\032\031\uff99" +
    "\032\uff99\033\uff99\034\uff99\035\uff99\036\uff99\037\uff99\040" +
    "\uff99\041\uff99\042\uff99\052\uff99\057\uff99\001\002\000\040" +
    "\004\uffbb\005\uffbb\006\uffbb\007\uffbb\011\uffbb\012\uffbb\013" +
    "\uffbb\015\uffbb\054\uffbb\055\uffbb\060\uffbb\061\uffbb\062\uffbb" +
    "\063\uffbb\064\uffbb\001\002\000\032\031\072\032\106\033" +
    "\100\034\077\035\073\036\103\037\105\040\075\041\101" +
    "\042\076\052\074\057\047\001\002\000\032\031\uff96\032" +
    "\uff96\033\uff96\034\uff96\035\uff96\036\uff96\037\uff96\040\uff96" +
    "\041\uff96\042\uff96\052\uff96\057\uff96\001\002\000\032\031" +
    "\uff97\032\uff97\033\uff97\034\uff97\035\uff97\036\uff97\037\uff97" +
    "\040\uff97\041\uff97\042\uff97\052\uff97\057\uff97\001\002\000" +
    "\046\004\uffb9\005\uffb9\006\uffb9\007\uffb9\011\uffb9\012\uffb9" +
    "\013\uffb9\015\uffb9\043\uffb9\044\uffb9\053\uffb9\054\uffb9\055" +
    "\uffb9\060\uffb9\061\uffb9\062\uffb9\063\uffb9\064\uffb9\001\002" +
    "\000\032\031\072\032\106\033\100\034\077\035\073\036" +
    "\103\037\105\040\075\041\101\042\076\052\074\057\047" +
    "\001\002\000\052\004\uffb7\005\uffb7\006\uffb7\007\uffb7\011" +
    "\uffb7\012\uffb7\013\uffb7\015\uffb7\043\uffb7\044\uffb7\045\uffb7" +
    "\046\uffb7\053\uffb7\054\uffb7\055\uffb7\060\uffb7\061\uffb7\062" +
    "\uffb7\063\uffb7\064\uffb7\001\002\000\062\004\uffc9\005\uffc9" +
    "\006\uffc9\007\uffc9\011\uffc9\012\uffc9\013\uffc9\015\uffc9\042" +
    "\uffc9\043\uffc9\044\uffc9\045\uffc9\046\uffc9\047\uffc9\050\uffc9" +
    "\051\uffc9\053\uffc9\054\uffc9\055\uffc9\060\uffc9\061\uffc9\062" +
    "\uffc9\063\uffc9\064\uffc9\001\002\000\052\002\uffff\003\036" +
    "\007\023\010\uffff\016\045\017\042\020\030\021\004\022" +
    "\031\023\033\024\014\025\010\026\024\027\027\030\035" +
    "\031\043\041\041\042\013\052\017\057\047\001\002\000" +
    "\006\002\001\010\001\001\002\000\004\031\202\001\002" +
    "\000\004\006\211\001\002\000\004\012\206\001\002\000" +
    "\006\004\204\006\uffcd\001\002\000\004\031\202\001\002" +
    "\000\004\006\uffce\001\002\000\024\016\045\017\042\020" +
    "\030\021\004\022\031\031\207\041\041\042\013\052\017" +
    "\001\002\000\020\004\uffde\005\uffde\006\uffde\011\uffde\012" +
    "\uffde\031\uffde\057\uffde\001\002\000\006\004\uffcc\006\uffcc" +
    "\001\002\000\020\004\uffcf\005\uffcf\006\uffcf\011\uffcf\012" +
    "\uffcf\031\uffcf\057\uffcf\001\002\000\004\002\000\001\002" +
    "\000\004\005\217\001\002\000\006\004\215\005\uffd1\001" +
    "\002\000\024\016\045\017\042\020\030\021\004\022\031" +
    "\031\207\041\041\042\013\052\017\001\002\000\004\005" +
    "\uffd2\001\002\000\020\004\uffd3\005\uffd3\006\uffd3\011\uffd3" +
    "\012\uffd3\031\uffd3\057\uffd3\001\002\000\004\011\uffe6\001" +
    "\002\000\004\007\023\001\002\000\006\011\ufff1\014\223" +
    "\001\002\000\004\007\023\001\002\000\004\011\ufff2\001" +
    "\002\000\004\050\226\001\002\000\024\016\045\017\042" +
    "\020\030\021\004\022\031\031\207\041\041\042\013\052" +
    "\017\001\002\000\004\011\uffdf\001\002\000\004\031\231" +
    "\001\002\000\004\041\232\001\002\000\006\005\233\031" +
    "\234\001\002\000\004\050\245\001\002\000\004\012\241" +
    "\001\002\000\004\005\236\001\002\000\004\050\237\001" +
    "\002\000\004\007\023\001\002\000\004\011\uffea\001\002" +
    "\000\024\016\045\017\042\020\030\021\004\022\031\031" +
    "\207\041\041\042\013\052\017\001\002\000\006\004\243" +
    "\005\uffe7\001\002\000\004\031\234\001\002\000\004\005" +
    "\uffe8\001\002\000\004\007\023\001\002\000\004\011\uffe9" +
    "\001\002\000\004\010\250\001\002\000\042\010\ufff3\011" +
    "\ufff3\014\ufff3\031\ufff3\032\ufff3\033\ufff3\034\ufff3\035\ufff3" +
    "\036\ufff3\037\ufff3\040\ufff3\041\ufff3\042\ufff3\052\ufff3\056" +
    "\ufff3\057\ufff3\001\002\000\020\004\uffcb\005\uffcb\006\uffcb" +
    "\011\uffcb\012\uffcb\031\uffcb\057\uffcb\001\002\000\006\007" +
    "\023\013\253\001\002\000\034\031\072\032\106\033\100" +
    "\034\077\035\073\036\103\037\105\040\075\041\101\042" +
    "\076\052\074\056\071\057\047\001\002\000\004\011\uffec" +
    "\001\002\000\004\007\023\001\002\000\004\011\uffeb\001" +
    "\002\000\006\006\261\012\260\001\002\000\024\016\045" +
    "\017\042\020\030\021\004\022\031\031\207\041\041\042" +
    "\013\052\017\001\002\000\020\004\uffd4\005\uffd4\006\uffd4" +
    "\011\uffd4\012\uffd4\031\uffd4\057\uffd4\001\002\000\004\006" +
    "\263\001\002\000\020\004\uffd0\005\uffd0\006\uffd0\011\uffd0" +
    "\012\uffd0\031\uffd0\057\uffd0\001\002\000\004\007\265\001" +
    "\002\000\034\031\072\032\106\033\100\034\077\035\073" +
    "\036\103\037\105\040\075\041\101\042\076\052\074\056" +
    "\071\057\047\001\002\000\004\015\273\001\002\000\036" +
    "\010\uffee\031\072\032\106\033\100\034\077\035\073\036" +
    "\103\037\105\040\075\041\101\042\076\052\074\056\071" +
    "\057\047\001\002\000\004\010\271\001\002\000\004\011" +
    "\ufff0\001\002\000\004\010\uffef\001\002\000\004\007\023" +
    "\001\002\000\036\010\uffed\031\uffed\032\uffed\033\uffed\034" +
    "\uffed\035\uffed\036\uffed\037\uffed\040\uffed\041\uffed\042\uffed" +
    "\052\uffed\056\uffed\057\uffed\001\002\000\034\031\072\032" +
    "\106\033\100\034\077\035\073\036\103\037\105\040\075" +
    "\041\101\042\076\052\074\056\071\057\047\001\002\000" +
    "\004\011\uffca\001\002\000\012\011\uffe1\042\uffc6\050\uffc6" +
    "\051\uffc6\001\002\000\004\011\uffe0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\276\000\050\002\043\003\045\004\024\005\015\007" +
    "\037\010\047\011\036\012\014\013\021\014\004\015\017" +
    "\016\010\017\011\020\020\022\005\023\025\024\031\025" +
    "\033\041\006\001\001\000\002\001\001\000\006\025\277" +
    "\041\006\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\023\101\026\263\027\066\030\065\031\064\032\063" +
    "\033\062\034\061\035\060\036\107\037\106\040\103\041" +
    "\110\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\014\256\015\017\016\010\017\011\020\020\022\005\001" +
    "\001\000\034\023\101\026\251\027\066\030\065\031\064" +
    "\032\063\033\062\034\061\035\060\036\107\037\106\040" +
    "\103\041\110\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\014\250\015\017\016\010\017\011\020\020\022" +
    "\005\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\050\002\246\003\045\004\024\005\015\007" +
    "\037\010\047\011\036\012\014\013\021\014\004\015\017" +
    "\016\010\017\011\020\020\022\005\023\025\024\031\025" +
    "\033\041\006\001\001\000\016\014\227\015\017\016\010" +
    "\017\011\020\020\022\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\023\101\026\220\027" +
    "\066\030\065\031\064\032\063\033\062\034\061\035\060" +
    "\036\107\037\106\040\103\041\110\001\001\000\002\001" +
    "\001\000\034\023\101\026\217\027\066\030\065\031\064" +
    "\032\063\033\062\034\061\035\060\036\107\037\106\040" +
    "\103\041\110\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\014\213\015\017\016\010\017" +
    "\011\020\020\022\005\043\212\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\042\051\001\001\000\002\001\001" +
    "\000\004\041\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\023\101\026\067\027\066\030" +
    "\065\031\064\032\063\033\062\034\061\035\060\036\107" +
    "\037\106\040\103\041\110\001\001\000\002\001\001\000" +
    "\004\052\166\001\001\000\004\051\162\001\001\000\004" +
    "\050\152\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\023\101\031\144" +
    "\032\063\033\062\034\061\035\060\036\107\037\106\040" +
    "\103\041\110\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\037\134\041\110\001\001\000\002\001\001\000" +
    "\040\023\101\026\122\027\066\030\065\031\064\032\063" +
    "\033\062\034\061\035\060\036\107\037\106\040\103\041" +
    "\110\054\124\055\123\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\023\101\026\111\027\066\030\065\031" +
    "\064\032\063\033\062\034\061\035\060\036\107\037\106" +
    "\040\103\041\110\053\112\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\023\101\026\116\027\066\030\065\031\064\032" +
    "\063\033\062\034\061\035\060\036\107\037\106\040\103" +
    "\041\110\054\117\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\023\101\026\116\027\066" +
    "\030\065\031\064\032\063\033\062\034\061\035\060\036" +
    "\107\037\106\040\103\041\110\054\121\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\023\101" +
    "\026\130\027\066\030\065\031\064\032\063\033\062\034" +
    "\061\035\060\036\107\037\106\040\103\041\110\001\001" +
    "\000\002\001\001\000\036\023\101\026\132\027\066\030" +
    "\065\031\064\032\063\033\062\034\061\035\060\036\107" +
    "\037\106\040\103\041\110\055\133\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\023\101" +
    "\026\136\027\066\030\065\031\064\032\063\033\062\034" +
    "\061\035\060\036\107\037\106\040\103\041\110\045\137" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\023\101\026\136\027\066" +
    "\030\065\031\064\032\063\033\062\034\061\035\060\036" +
    "\107\037\106\040\103\041\110\045\143\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\023" +
    "\101\030\151\031\064\032\063\033\062\034\061\035\060" +
    "\036\107\037\106\040\103\041\110\001\001\000\034\023" +
    "\101\026\150\027\066\030\065\031\064\032\063\033\062" +
    "\034\061\035\060\036\107\037\106\040\103\041\110\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\023\101" +
    "\031\160\032\063\033\062\034\061\035\060\036\107\037" +
    "\106\040\103\041\110\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\023\101" +
    "\032\165\033\062\034\061\035\060\036\107\037\106\040" +
    "\103\041\110\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\023\101\033\171\034\061\035" +
    "\060\036\107\037\106\040\103\041\110\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\023" +
    "\101\034\173\035\060\036\107\037\106\040\103\041\110" +
    "\001\001\000\002\001\001\000\002\001\001\000\050\002" +
    "\176\003\045\004\024\005\015\007\037\010\047\011\036" +
    "\012\014\013\021\014\004\015\017\016\010\017\011\020" +
    "\020\022\005\023\025\024\031\025\033\041\006\001\001" +
    "\000\002\001\001\000\006\021\202\044\200\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\021\202\044\204\001\001\000\002\001\001\000\016\014" +
    "\207\015\017\016\010\017\011\020\020\022\005\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\014\213\015\017\016\010\017\011\020\020\022\005\043" +
    "\215\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\221\001\001\000\002\001\001\000" +
    "\004\004\223\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\014\226\015\017\016\010\017\011\020\020\022" +
    "\005\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\046\234\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\237\001\001\000\002\001\001\000\016\014\241\015" +
    "\017\016\010\017\011\020\020\022\005\001\001\000\002" +
    "\001\001\000\004\046\243\001\001\000\002\001\001\000" +
    "\004\004\245\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\253\001" +
    "\001\000\034\023\101\026\254\027\066\030\065\031\064" +
    "\032\063\033\062\034\061\035\060\036\107\037\106\040" +
    "\103\041\110\001\001\000\002\001\001\000\004\004\255" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\014" +
    "\261\015\017\016\010\017\011\020\020\022\005\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\006\266\023\101\026\265\027\066" +
    "\030\065\031\064\032\063\033\062\034\061\035\060\036" +
    "\107\037\106\040\103\041\110\047\267\001\001\000\002" +
    "\001\001\000\040\006\266\023\101\026\265\027\066\030" +
    "\065\031\064\032\063\033\062\034\061\035\060\036\107" +
    "\037\106\040\103\041\110\047\271\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\273" +
    "\001\001\000\002\001\001\000\034\023\101\026\275\027" +
    "\066\030\065\031\064\032\063\033\062\034\061\035\060" +
    "\036\107\037\106\040\103\041\110\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }
   public GestionErroresTiny getErrores() {return errores;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {
  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // PROG ::= INST PCOMA PROG 
            {
              NodoAst RESULT =null;
		NodoAst i = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		NodoAst p = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = new Prog((Inst)i,(Prog)p);	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("PROG",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= PROG EOF 
            {
              Object RESULT =null;
		NodoAst start_val = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROG ::= 
            {
              NodoAst RESULT =null;
			RESULT = new Prog();	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("PROG",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INST ::= ASIG 
            {
              NodoAst RESULT =null;
		NodoAst as = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = as;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INST ::= DEC_VAR 
            {
              NodoAst RESULT =null;
		NodoAst dec = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = dec;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INST ::= TIPO_DEF 
            {
              NodoAst RESULT =null;
		NodoAst def = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = def;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INST ::= FUN_CALL 
            {
              NodoAst RESULT =null;
		NodoAst fc = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = fc;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INST ::= RETURN_VAL 
            {
              NodoAst RESULT =null;
		NodoAst rt = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = rt;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INST ::= BLOCK 
            {
              NodoAst RESULT =null;
		NodoAst bk = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = bk;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INST ::= FUN_DEF 
            {
              NodoAst RESULT =null;
		NodoAst fd = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = fd;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INST ::= IF_BLOCK 
            {
              NodoAst RESULT =null;
		NodoAst ib = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = ib;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INST ::= CASE_BLOCK 
            {
              NodoAst RESULT =null;
		NodoAst cb = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = cb;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INST ::= REPEAT_BLOCK 
            {
              NodoAst RESULT =null;
		NodoAst rp = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = rp;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INST ::= error 
            {
              NodoAst RESULT =null;
			RESULT = new SyntaxError();	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // BLOCK ::= BAP PROG BCL 
            {
              NodoAst RESULT =null;
		NodoAst p = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
			RESULT = new Block((Prog) p);	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BLOCK",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // IF_BLOCK ::= IF EXP0 BLOCK ELSE BLOCK 
            {
              NodoAst RESULT =null;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		NodoAst e = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		NodoAst b = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		NodoAst eb = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = new If((Exp) e, (Block) b, (Block) eb, i.fila);	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("IF_BLOCK",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // IF_BLOCK ::= IF EXP0 BLOCK 
            {
              NodoAst RESULT =null;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		NodoAst e = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		NodoAst b = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = new If((Exp) e, (Block) b, i.fila);	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("IF_BLOCK",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CASE_BLOCK ::= CASE EXP0 BAP CASE_MATCH_LIST BCL 
            {
              NodoAst RESULT =null;
		TokenValue c = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		NodoAst e = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		ArrayList<CaseMatch> l = (ArrayList<CaseMatch>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
			RESULT = new Case((Exp) e, l, c.fila);	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CASE_BLOCK",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CASE_MATCH_LIST ::= CASE_MATCH CASE_MATCH_LIST 
            {
              ArrayList<CaseMatch> RESULT =null;
		NodoAst cm = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		ArrayList<CaseMatch> l = (ArrayList<CaseMatch>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			l.add(0, (CaseMatch) cm); RESULT = l;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CASE_MATCH_LIST",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CASE_MATCH_LIST ::= CASE_MATCH 
            {
              ArrayList<CaseMatch> RESULT =null;
		NodoAst cm = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = new ArrayList(Arrays.asList(new CaseMatch[] {(CaseMatch)cm}));	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CASE_MATCH_LIST",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CASE_MATCH ::= EXP0 THEN BLOCK 
            {
              NodoAst RESULT =null;
		NodoAst e = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		NodoAst b = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = new CaseMatch((Exp) e, (Block) b);	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CASE_MATCH",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // REPEAT_BLOCK ::= REPEAT EXP0 BLOCK 
            {
              NodoAst RESULT =null;
		TokenValue r = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		NodoAst e = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		NodoAst b = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = new Repeat((Exp) e, (Block) b, r.fila);	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("REPEAT_BLOCK",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // REPEAT_BLOCK ::= REPEAT EXP0 VERT EXP0 BLOCK 
            {
              NodoAst RESULT =null;
		TokenValue r = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		NodoAst e1 = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		NodoAst e2 = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		NodoAst b = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = new Repeat((Exp) e1, (Exp) e2, (Block) b, r.fila);	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("REPEAT_BLOCK",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FUN_DEF ::= FUN TIPO IDEN PAP ARGS PCL IGUAL BLOCK 
            {
              NodoAst RESULT =null;
		TokenValue f = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-7)).value;
		NodoAst t = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		ArrayList<Argumento> args = (ArrayList<Argumento>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		NodoAst b = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = new DefFun((Tipo) t, new Iden(id), (Block) b, args, f.fila);	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FUN_DEF",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FUN_DEF ::= FUN TIPO IDEN PAP PCL IGUAL BLOCK 
            {
              NodoAst RESULT =null;
		TokenValue f = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		NodoAst t = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		NodoAst b = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = new DefFun((Tipo) t, new Iden(id), (Block) b, f.fila);	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FUN_DEF",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ARGS ::= IDEN DOSPUNTOS TIPO COMA ARGS 
            {
              ArrayList<Argumento> RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		NodoAst t = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		ArrayList<Argumento> args = (ArrayList<Argumento>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			args.add(0, new Argumento(new Iden(id), (Tipo) t)); RESULT = args;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGS",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ARGS ::= IDEN DOSPUNTOS TIPO 
            {
              ArrayList<Argumento> RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		NodoAst t = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = new ArrayList(Arrays.asList(
				new Argumento[] {new Argumento(new Iden(id), (Tipo) t)}));	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGS",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // RETURN_VAL ::= RETURN EXP0 
            {
              NodoAst RESULT =null;
		TokenValue r = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		NodoAst e = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = new Return((Exp) e, r.fila);	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("RETURN_VAL",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FUN_CALL ::= IDEN PAP PARAMS PCL 
            {
              NodoAst RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		ArrayList<Exp> par = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
			RESULT = new FunCall(new Iden(id), par);	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FUN_CALL",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FUN_CALL ::= IDEN PAP PCL 
            {
              NodoAst RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
			RESULT = new FunCall(new Iden(id));	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FUN_CALL",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // PARAMS ::= EXP0 COMA PARAMS 
            {
              ArrayList<Exp> RESULT =null;
		NodoAst e = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		ArrayList<Exp> par = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			par.add(0, (Exp) e); RESULT = par;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("PARAMS",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // PARAMS ::= EXP0 
            {
              ArrayList<Exp> RESULT =null;
		NodoAst e = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = new ArrayList(Arrays.asList(new Exp[] {(Exp)e}));	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("PARAMS",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DEC_VAR ::= TIPO IDEN 
            {
              NodoAst RESULT =null;
		NodoAst t = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = new Dec((Tipo)t, new Iden(id));	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DEC_VAR",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DEC_VAR ::= TIPO ASIG 
            {
              NodoAst RESULT =null;
		NodoAst t = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		NodoAst as = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = new Dec((Tipo)t, (Asig) as);	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DEC_VAR",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TIPO_DEF ::= TYPE IDEN IGUAL TIPO 
            {
              NodoAst RESULT =null;
		TokenValue ty = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		NodoAst t = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = new DefTipo((Tipo) t, new Iden(id), ty.fila);	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO_DEF",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TIPO ::= IDEN 
            {
              NodoAst RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = new TipoNombre(new Iden(id));	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TIPO ::= TIPO_ARRAY 
            {
              NodoAst RESULT =null;
		NodoAst t = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = t;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TIPO ::= TIPO_TUPLA 
            {
              NodoAst RESULT =null;
		NodoAst t = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = t;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TIPO ::= TIPO_DICT 
            {
              NodoAst RESULT =null;
		NodoAst t = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = t;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TIPO ::= TIPO_STRUCT 
            {
              NodoAst RESULT =null;
		NodoAst t = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = t;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TIPO ::= TIPO_PUNT 
            {
              NodoAst RESULT =null;
		NodoAst t = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = t;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TIPO ::= TINT 
            {
              NodoAst RESULT =null;
			RESULT = new TipoInt();	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TIPO ::= TBOOL 
            {
              NodoAst RESULT =null;
			RESULT = new TipoBool();	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TIPO ::= TSTRING 
            {
              NodoAst RESULT =null;
			RESULT = new TipoString();	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TIPO ::= TDEC 
            {
              NodoAst RESULT =null;
			RESULT = new TipoDec();	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TIPO_ARRAY ::= CAP TIPO CCL 
            {
              NodoAst RESULT =null;
		NodoAst t = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
			RESULT = new TipoArray((Tipo) t);	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO_ARRAY",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TIPO_TUPLA ::= PAP TIPO_TUPLA_LISTA PCL 
            {
              NodoAst RESULT =null;
		ArrayList<Tipo> ls = (ArrayList<Tipo>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
			RESULT = new TipoTupla(ls);	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO_TUPLA",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TIPO_TUPLA_LISTA ::= TIPO COMA TIPO_TUPLA_LISTA 
            {
              ArrayList<Tipo> RESULT =null;
		NodoAst t = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		ArrayList<Tipo> ls = (ArrayList<Tipo>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			ls.add(0, (Tipo) t); RESULT = ls;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO_TUPLA_LISTA",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TIPO_TUPLA_LISTA ::= TIPO 
            {
              ArrayList<Tipo> RESULT =null;
		NodoAst t = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = new ArrayList(Arrays.asList(new Tipo[] {(Tipo)t}));	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO_TUPLA_LISTA",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TIPO_DICT ::= CAP TIPO DOSPUNTOS TIPO CCL 
            {
              NodoAst RESULT =null;
		NodoAst cv = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		NodoAst vl = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
			RESULT = new TipoDict((Tipo) cv, (Tipo) vl);	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO_DICT",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TIPO_STRUCT ::= STRUCT CAP LISTA_STRUCT CCL 
            {
              NodoAst RESULT =null;
		ArrayList<CampoStruct> ls = (ArrayList<CampoStruct>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
			RESULT = new TipoStruct(ls);	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO_STRUCT",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // LISTA_STRUCT ::= CAMPO_STRUCT COMA LISTA_STRUCT 
            {
              ArrayList<CampoStruct> RESULT =null;
		NodoAst cp = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		ArrayList<CampoStruct> ls = (ArrayList<CampoStruct>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			ls.add(0, (CampoStruct) cp); RESULT = ls;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LISTA_STRUCT",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // LISTA_STRUCT ::= CAMPO_STRUCT 
            {
              ArrayList<CampoStruct> RESULT =null;
		NodoAst cp = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = new ArrayList(Arrays.asList(new CampoStruct[] {(CampoStruct) cp}));	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LISTA_STRUCT",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CAMPO_STRUCT ::= IDEN DOSPUNTOS TIPO 
            {
              NodoAst RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		NodoAst t = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = new CampoStruct(new Iden(id), (Tipo) t);	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CAMPO_STRUCT",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TIPO_PUNT ::= REF TIPO 
            {
              NodoAst RESULT =null;
		NodoAst t = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = new TipoPunt((Tipo) t);	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO_PUNT",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ASIG ::= ASIG0 IGUAL EXP0 
            {
              NodoAst RESULT =null;
		NodoAst as = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		NodoAst e = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = new Asig((Asignable) as, (Exp) e);	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ASIG",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ASIG0 ::= ASIG0 PUNTO IDEN 
            {
              NodoAst RESULT =null;
		NodoAst as = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = new Asignable((Asignable) as, new Iden(id));	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ASIG0",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ASIG0 ::= ASIG0 CAP EXP0 CCL 
            {
              NodoAst RESULT =null;
		NodoAst as = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		NodoAst exp = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
			RESULT = new Asignable((Exp) exp, (Asignable) as);	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ASIG0",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ASIG0 ::= DEREF ASIG1 
            {
              NodoAst RESULT =null;
		NodoAst as = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = new Asignable((Asignable) as);	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ASIG0",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ASIG0 ::= IDEN 
            {
              NodoAst RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = new Asignable(new Iden(id));	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ASIG0",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ASIG1 ::= IDEN 
            {
              NodoAst RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = new Asignable(new Iden(id));	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ASIG1",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ASIG1 ::= PAP ASIG0 PCL 
            {
              NodoAst RESULT =null;
		NodoAst as = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
			RESULT = as;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ASIG1",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXP0 ::= EXP1 OR EXP0 
            {
              NodoAst RESULT =null;
		NodoAst e1 = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		NodoAst e2 = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = new Exp(Operator.OR, (Exp) e1, (Exp) e2);	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP0",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXP0 ::= EXP1 
            {
              NodoAst RESULT =null;
		NodoAst e = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = e;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP0",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXP1 ::= EXP1 AND EXP2 
            {
              NodoAst RESULT =null;
		NodoAst e1 = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		NodoAst e2 = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = new Exp(Operator.AND, (Exp) e1, (Exp) e2);	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP1",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXP1 ::= EXP2 
            {
              NodoAst RESULT =null;
		NodoAst e = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = e;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP1",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXP2 ::= NOT EXP3 
            {
              NodoAst RESULT =null;
		NodoAst e = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = new Exp(Operator.NOT, (Exp) e);	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP2",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXP2 ::= EXP3 
            {
              NodoAst RESULT =null;
		NodoAst e = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = e;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP2",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXP3 ::= EXP4 OP0 EXP3 
            {
              NodoAst RESULT =null;
		NodoAst e1 = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Operator op = (Operator)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		NodoAst e2 = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = new Exp(op, (Exp) e1, (Exp) e2);	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP3",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXP3 ::= EXP4 
            {
              NodoAst RESULT =null;
		NodoAst e = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = e;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP3",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXP4 ::= EXP5 OP1 EXP4 
            {
              NodoAst RESULT =null;
		NodoAst e1 = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Operator op = (Operator)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		NodoAst e2 = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = new Exp(op, (Exp) e1, (Exp) e2);	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP4",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXP4 ::= EXP5 
            {
              NodoAst RESULT =null;
		NodoAst e = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = e;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP4",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXP5 ::= EXP6 OP2 EXP5 
            {
              NodoAst RESULT =null;
		NodoAst e1 = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Operator op = (Operator)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		NodoAst e2 = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = new Exp(op, (Exp) e1, (Exp) e2);	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP5",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXP5 ::= EXP6 
            {
              NodoAst RESULT =null;
		NodoAst e = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = e;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP5",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXP6 ::= EXP7 MOD EXP6 
            {
              NodoAst RESULT =null;
		NodoAst e1 = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		NodoAst e2 = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = new Exp(Operator.MOD, (Exp) e1, (Exp) e2);	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP6",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXP6 ::= EXP7 
            {
              NodoAst RESULT =null;
		NodoAst e = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = e;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP6",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXP7 ::= EXP8 
            {
              NodoAst RESULT =null;
		NodoAst e = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = e;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP7",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXP7 ::= EXP9 
            {
              NodoAst RESULT =null;
		NodoAst e = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = e;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP7",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXP8 ::= CONST 
            {
              NodoAst RESULT =null;
		NodoAst c = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = c;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP8",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXP8 ::= FUN_CALL 
            {
              NodoAst RESULT =null;
		NodoAst fc = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = new ExpFun((FunCall)fc);	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP8",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXP8 ::= PAP EXP0 PCL 
            {
              NodoAst RESULT =null;
		NodoAst e = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
			RESULT = e;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP8",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXP9 ::= REF EXP9 
            {
              NodoAst RESULT =null;
		NodoAst e = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = new Exp(Operator.REF, (Exp) e);	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP9",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXP9 ::= ASIG0 
            {
              NodoAst RESULT =null;
		NodoAst e = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = new ExpAsig((Asignable) e);	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP9",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CONST ::= TRUE 
            {
              NodoAst RESULT =null;
		TokenValue t = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = new ConstBool(t);	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CONST",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CONST ::= FALSE 
            {
              NodoAst RESULT =null;
		TokenValue f = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = new ConstBool(f);	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CONST",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CONST ::= ENT 
            {
              NodoAst RESULT =null;
		TokenValue e = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = new ConstInt(e);	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CONST",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CONST ::= DEC 
            {
              NodoAst RESULT =null;
		TokenValue d = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = new ConstDec(d);	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CONST",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CONST ::= INF 
            {
              NodoAst RESULT =null;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = new ConstInt(i);	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CONST",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CONST ::= NULL 
            {
              NodoAst RESULT =null;
		TokenValue n = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = new ConstNull(n);	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CONST",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CONST ::= STRING 
            {
              NodoAst RESULT =null;
		TokenValue s = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = new ConstString(s);	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CONST",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CONST ::= CAP LISTA CCL 
            {
              NodoAst RESULT =null;
		TokenValue c = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		ArrayList<Exp> l = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
			RESULT = new ConstArray(l, c.fila, c.col);	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CONST",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CONST ::= PAP TUPLA PCL 
            {
              NodoAst RESULT =null;
		TokenValue p = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		ArrayList<Exp> t = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
			RESULT = new ConstTupla(t, p.fila, p.col);	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CONST",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CONST ::= CAP DICT CCL 
            {
              NodoAst RESULT =null;
		TokenValue c = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		ArrayList<DictPair> d = (ArrayList<DictPair>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
			RESULT = new ConstDict(d, c.fila, c.col);	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CONST",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // LISTA ::= EXP0 COMA LISTA 
            {
              ArrayList<Exp> RESULT =null;
		NodoAst e = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		ArrayList<Exp> l = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			l.add(0, (Exp)e); RESULT = l;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LISTA",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // LISTA ::= EXP0 
            {
              ArrayList<Exp> RESULT =null;
		NodoAst e = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = new ArrayList(Arrays.asList(new Exp[] {(Exp)e}));	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LISTA",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // TUPLA ::= EXP0 COMA LISTA 
            {
              ArrayList<Exp> RESULT =null;
		NodoAst e = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		ArrayList<Exp> l = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			l.add(0, (Exp)e); RESULT = l;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TUPLA",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // DICT ::= EXP0 DOSPUNTOS EXP0 COMA DICT 
            {
              ArrayList<DictPair> RESULT =null;
		NodoAst e1 = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		NodoAst e2 = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		ArrayList<DictPair> d = (ArrayList<DictPair>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			d.add(0, new DictPair((Exp)e1, (Exp)e2)); RESULT = d;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DICT",43, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // DICT ::= EXP0 DOSPUNTOS EXP0 
            {
              ArrayList<DictPair> RESULT =null;
		NodoAst e1 = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		NodoAst e2 = (NodoAst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			RESULT = new ArrayList(Arrays.asList(
			new DictPair[] {new DictPair((Exp)e1, (Exp)e2)}));	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DICT",43, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // OP0 ::= ES_IGUAL 
            {
              Operator RESULT =null;
			RESULT = Operator.ES_IGUAL;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP0",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // OP0 ::= MENOR 
            {
              Operator RESULT =null;
			RESULT = Operator.MENOR;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP0",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // OP0 ::= MAYOR 
            {
              Operator RESULT =null;
			RESULT = Operator.MAYOR;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP0",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // OP0 ::= MAYIG 
            {
              Operator RESULT =null;
			RESULT = Operator.MAYIG;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP0",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // OP0 ::= MENIG 
            {
              Operator RESULT =null;
			RESULT = Operator.MENIG;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP0",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // OP1 ::= MAS 
            {
              Operator RESULT =null;
			RESULT = Operator.MAS;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // OP1 ::= MENOS 
            {
              Operator RESULT =null;
			RESULT = Operator.MENOS;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // OP1 ::= CONCAT 
            {
              Operator RESULT =null;
			RESULT = Operator.CONCAT;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // OP2 ::= POR 
            {
              Operator RESULT =null;
			RESULT = Operator.POR;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP2",40, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // OP2 ::= DIV 
            {
              Operator RESULT =null;
			RESULT = Operator.DIV;	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP2",40, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}

